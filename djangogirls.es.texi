\input texinfo   @c -*-texinfo-*-
@comment $Id@w{$}
@comment %**start of header
@include version.texi
@settitle Tutorial de Django Girls @value{VERSION}
@syncodeindex pg cp
@comment %**end of header
@include copying-cc.texi

@titlepage
@title Tutorial de Django Girls
@subtitle para la versi@'on @value{VERSION}, @value{UPDATED}
@documentencoding UTF-8
@documentlanguage es

@author Django Girls
@author Revisado por David Arroyo Men@'endez (@email{davidam@@gmail.com})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Arriba
@top Tutorial de Django Girls

Este manual es acerca de Django (version @value{VERSION}, @value{UPDATED}).
@end ifnottex

@menu
* Introducci@'on::
* Instalaci@'on::
* C@'omo funciona Internet::
* Introducci@'on a la l@'{@dotless{i}}nea de comandos::
* Introducci@'on a Python::
* ¿Qué es Django?::
* Instalaci@'on de Django::
* ¡Tu primer proyecto en Django!::
* Modelos en Django::
* Administrador de Django::
* ¡Despliega!::
* URLs en Django::
* Vistas en Django - ¡Hora de crear!::
* Introducci@'on a HTML::
* ORM de Django (QuerySets)::
* Datos dinámicos en las plantillas::
* Plantillas de Django::
* CSS - ¡Qué quede bonito!::
* Extendiendo plantillas::
* Amplia tu aplicaci@'on::
* Formularios de Django::
* ¿Y ahora qu@'e?::
* Licencia::
* Photos::
* Index::


@end menu

@node Introducci@'on
@chapter Introducci@'on
@cindex Introducci@'on

@section Bienvenida

¡Bienvenido/a al tutorial de las Django Girls! ¡Nos alegra que est@'es
aqu@'{@dotless{i}} :) En este tutorial, te llevaremos de viaje a las
entrañas de la tecnolog@'{@dotless{i}}a web, para que veas todas las
piezas que se necesitan para que la web funcione.

Como pasa con todas las cosas nuevas, va a ser una aventura - pero no
te preocupes; una vez que te has decidido a empezar, te ir@'a de
maravilla :)

@section Introducci@'on

¿Alguna vez has tenido la sensaci@'on de que el mundo es cada vez
m@'as tecnol@'ogico? ¿que cada vez lo entiendes menos? ¿Alguna vez te
has planteado crear un sitio web pero no sab@'{@dotless{i}}as por
d@'onde empezar? ¿Has pensado alguna vez que el mundo del software es
demasiado complicado como para intentar hacer algo por tu cuenta?

Bueno, ¡tenemos buenas noticias! Programar no es tan
dif@'{@dotless{i}}cil como parece y queremos demostrarte lo divertido
que puede llegar a ser.

Este tutorial no te convertirá en programadora de la noche a la
mañana. Si quieres ser buena en esto, necesitarás meses o incluso años
de aprendizaje y práctica. Sin embargo queremos enseñarte que
programar o crear sitios web no es tan complicado como
parece. Intentaremos explicar las cosas lo mejor que podamos, para
perderle el miedo a la tecnología.

¡Esperamos conseguir que te guste la tecnología tanto como a nosotras!

@section ¿Qué aprenderás con este tutorial?

Cuando termines el tutorial, tendr@'as una aplicaci@'on web sencilla y
funcional: tu propio blog. Te mostraremos como ponerla en
l@'{@dotless{i}}nea, ¡para que otros puedan ver tu trabajo!

Tendr@'a (m@'as o menos) esta pinta:

@image{images/application,6in,,Django Girls Blog}

Si estás siguiendo este tutorial por tu cuenta y no tienes un mentor
que te ayude en caso de dificultades, tenemos un chat para ti:
Gitter. ¡Hemos pedido a mentores y asistentes de ediciones anteriores,
que pasen por all@'{@dotless{i}} de vez en cuando para echar una mano
a otras con el tutorial! ¡No tengas miedo de preguntar
ah@'{@dotless{i}}!

Si estás siguiendo este tutorial por tu cuenta y no tienes un mentor
que te ayude en caso de dificultades, tenemos un chat para ti:
@url{https://gitter.im/DjangoGirls/tutorial, Gitter}. ¡Hemos pedido a
mentores y asistentes de ediciones anteriores, que pasen por allí de
vez en cuando para echar una mano a otras con el tutorial! ¡No tengas
miedo de preguntar ahí!

@section Seguir el tutorial desde casa

Participar en un taller de Django Girls en vivo es genial, pero somos
conscientes de que no siempre es posible hacerlo. Por eso, te
recomendamos hacer este tutorial en casa. Para las que est@'ais en
casa, estamos preparando v@'{@dotless{i}}deos que facilitar@'an seguir
el tutorial por tu cuenta. Todav@'{@dotless{i}}a est@'a en progreso,
pero cada vez hay m@'as cosas explicadas en el canal de YouTube
@uref{https://www.youtube.com/channel/UC0hNd2uW8jTR5K3KBzRuG2A/feed,
Coding is for girls} (Nota: en inglés).

En cada cap@'{@dotless{i}}tulo hay un enlace que lleva al
v@'{@dotless{i}}deo correspondiente (si lo hay).

@section Sobre nosotras y C@'omo contribuir

Este tutorial lo mantiene @uref{https://djangogirls.org/,
DjangoGirls}. Si encuentras algún error o quieres actualizar el
tutorial, por favor
@uref{https://github.com/DjangoGirls/tutorial/blob/master/README.md,
sigue la gu@'{@dotless{i}}a de c@'omo contribuir}

@section ¿Te gustaría ayudarnos a traducir el tutorial a otros idiomas?

Actualmente, las traducciones se hacen en la plataforma crowdin.com,
en el siguiente enlace:

@uref{https://crowdin.com/project/django-girls-tutorial}

Si tu idioma no aparece en la lista de crowdin, por favor abre un
nuevo issue con el idioma para que podamos añadirlo.

@node Instalaci@'on
@chapter Instalaci@'on
@cindex Instalaci@'on

@section Si est@'as haciendo el tutorial en casa

Si estás haciendo el tutorial en casa, y no en uno de los eventos de
Django Girls, puedes saltar este capítulo por completo e ir
directamente al capítulo ¿cómo funciona Internet?.

Esto es porque cubrimos las instalaciones de cosas a medida que se
requieran en el tutorial -- esta es solamente una página adicional que
reúne toda la información de instalación en un solo lugar (lo que es
útil para algunos formatos de taller). Puedes escoger instalar todo lo
que está en esta página ya mismo si lo deseas. Pero si quieres empezar
a aprender cosas antes de instalar un grupo de materiales en tu
computadora, salta este capítulo y te explicaremos las partes de la
instalación luego, cuando sean necesarias.

¡Buena suerte!

@section Si est@'as asistiendo a un workshop

Si estás asistiendo a uno de los Django Girls events:

Tu workshop puede tener una "fiesta de instalación" antes del workshop
principal. Si estás en un equipo de instalación, ¡ésta página es para
ti! Sigue las instrucciones aquí para obtener todo lo que tu necesitas
para el workshop de instalación, con la ayuda de los entrenadores si
lo necesitas. Entonces en el workshop principal, tu estarás preparado
para saltar las instrucciones de instalación que encontrarás en el
tutorial principal cuando llegues a ellos.

Los organizadores del taller pueden pedirte que en casa intentes
instalar todo en tu computadora antes de iniciar el taller. Si has
estado preguntando cómo hacer esto, ¡esta página es para ti! Sigue las
instrucciones aquí, lo mejor puedas. Así, en el taller principal,
cuando estés en uno de los pasos de la instalación del tutorial, y si
no tenías esa pieza instalada, puedes pedir ayuda a una de tus
entrenadoras.

Si tu taller no tiene una sesión de instalación (o no pudiste
asistir), y si los organizadores no te piden que intentes instalar
todo antes de tu llegada, salta esta página y ve al capítulo Cómo el
internet funciona. Instalarás todo lo que necesitas para trabajar a lo
largo del tutorial.

@section Instalaci@'on

En este tutorial vas a construir un blog. Según cómo vayas a través
del tutorial, serás instruida en cómo instalar varios softwares en tu
computadora y configurar algunas cuentas online como sean
necesarias. Esta página reune todas las instalaciones e instrucciones
del registro en un lugar (el cual es útil para algunos formatos del
taller).

@section Breve introducci@'on a la l@'{@dotless{i}}nea de comandos

Muchos de los pasos citados abajo hacen referencia a la "consola",
"terminal", "ventana de comandos", o "línea de comandos" -- todos
éstos términos significan la misma cosa: una ventana en tu computadora
donde puedes introducir comandos. Cuando estés en el tutorial
principal, aprenderás más acerca de la línea de comandos. Por ahora,
la parte principal que necesitas es saber cómo abrir una ventana de
comandos y cómo luce:

@subsection Abriendo: Windows

Dependiendo de tu versión de Windows y tu teclado, una de las opciones
siguientes debería abrir una ventana de comandos (puede que necesites
experimentar un poco, pero no se necesita probar todas estas
sugerencias):

Ve al menú o pantalla de Inicio, y escribe "Símbolo del Sistema" en el
cuadro de búsqueda.
Ve a Menú de inicio → Windows System → Command Prompt.
Ve al menú de Inicio → Todos los Programas → Accessorios → Símbolo del
Sistema.

Ve a la pantalla de Inicio, pasa el rat@'on sobre la esquina inferior
izquierda de la pantalla, y haz click en la flecha hacia abajo (en una
pantalla t@'actil, desliza hacia arriba desde la parte baja de la
pantalla). La p@'agina de la Aplicaci@'on debería abrirse. Haz click
en S@'{@dotless{i}}mbolo del Sistema en la secci@'on Sistema de
Windows.

Mant@'en la tecla especial de Windows de tu teclado y pulsa "X". Elige
"S@'{@dotless{i}}mbolo del Sistema" del men@'u emergente.

Mant@'en pulsada la tecla de Windows y pulsa "R" para abrir una ventana
"Ejecutar". Escribe "cmd" en la caja, y haz click en OK.

@image{images/windows-plus-r,6in,,Windows Commands}

M@'as adelante en este tutorial, necesitar@'as tener dos consolas de
comandos abiertas a la misma vez. Sin embargo, en algunas versiones de
Windows, si ya tienes abierta una ventana de comandos e intentas abrir
otra usando el mismo m@'etodo, simplemente maximizar@'a la que ya
tienes abierta. ¡Int@'entalo ahora en tu ordenador y mira qu@'e
ocurre! Si solo se abre una ventana de comandos, intenta alguno de los
otros m@'etodos explicados anteriormente. Al menos uno de ellos
deber@'{@dotless{i}}a abrir una nueva ventana de comandos.

@subsection Abriendo: OS X

Ve a Aplicaciones → Utilidades → Terminal.

@subsection Abriendo: Linux

Probablemente se encuentre en Aplicaciones → Accesorios → Terminal, o
Aplicaciones → Sistema → Terminal, aunque esto dependerá de tu
sistema. Si no lo encuentras allí, intenta buscarlo en Google. :)

@section Instalar Python

Para lectores en casa: este capitulo se cubre en el vídeo
@uref{https://www.youtube.com/watch?v=pVTaqzKZCdA, Installing Python &
Code Editor.}

Esta sección está basada en un tutorial de
@uref{https://github.com/ggcarrots/django-carrots, Geek Girls Carrots}

Django está escrito en Python. Necesitamos Python para hacer cualquier
cosa en Django. ¡Empecemos con instalarlo! Queremos que instales la
última versión de Python 3, así que si tienes una versión anterior,
necesitarás actualizarla. Si ya tienes la versión 3.4 o una superior,
debería ir bien.

Por favor, instala Python normalmente de la siguiente forma, incluso
si tienes Anaconda instalada en el ordenador.

@subsection Instalar Python: Windows

Primero comprueba si tu ordenador ejecuta la versión 32 bits de
Windows o la de 64, en "Tipo de sistema" en la p@'agina de "Acerca
de". Para llegar a esta p@'agina, intenta uno de estos m@'etodos:

@itemize @bullet
@item
Presiona la tecla de Windows y la tecla Pause/Break al mismo tiempo

@item
Abre el Panel de Control desde el menú de Windows, después accede a
Sistema & y Seguridad, luego a Sistema

@item
Presiona el botón de Windows, luego accede a Configuración > Sistema >
Acerca de

@end itemize

Puedes descargar Python para Windows desde la siguiente web
@uref{https://www.python.org/downloads/windows/}. Clica en el enlace
"Latest Python 3 Release -Python x.x.x". Si tu ordenador ejecuta la
versión de 64 bits de Windows, descarga Windows x86-64 executable
installer. De lo contrario, descarga Windows x86 executable
installer. Después de descargar el instalador, deberías ejecutarlo
(dándole doble click) y seguir las instrucciones.

Una cosa para tener en cuenta: Durante la instalación, verás una
ventana de "Setup". Asegúrate de marcar las casillas "Add Python 3.6
to PATH" o "Add Python to your environment variables" y hacer click en
"Install Now", como se muestra aquí (puede que se vea un poco
diferente si estás instalando una versión diferente):

Cuando la instalación se complete, verás un cuadro de diálogo con un
enlace que puedes seguir para saber más sobre Python o sobre la
versión que has instalado. Cierra o cancela ese dialogo -- ¡Aprenderás
más en ese tutorial!

Nota: si estás usando una versión anterior de Windows (7, Vista o
cualquier versión anterior) y el instalador de la versión 3.6.x de
Python falla con un error, intenta también:

@itemize @bullet
@item
instalar todas las actualizaciones de Windows e intenta instalar
Python de nuevo; o

@item
instalar una versi@'on de
@url{https://www.python.org/downloads/windows/, Python anterior}, por
ejemplo, @url{https://www.python.org/downloads/release/python-346/,
3.4.6}.

@end itemize

Nota: Antes de instalar Python en OS X, debes asegurarte de que la
configuración del Mac permita instalar paquetes que no estén en la App
Store. ve a preferencias del sistema (System Preferences, está en la
carpeta Aplicaciones), da click en "Seguridad y privacidad" (Security
& Privacy) y luego la pestaña "General". Si tu "Permitir aplicaciones
descargadas desde:" (Allow apps downloaded from:) está establecida a
"Mac App Store," cambia a "Mac App Store y desarrolladores
identificados." (Mac App Store and identified developers)

Necesitas ir a la página web
@url{https://www.python.org/downloads/release/python-361/} y descargar
el instalador de Python:

@itemize @bullet
@item
Descarga el archivo Mac OS X 64-bit/32-bit installer,

@item
Doble click en python-3.6.1-macosx10.6.pkg para ejecutar el instalador.

@end itemize

@subsection Instalar Python: Linux

Es muy posible que ya tengas instalado Python de serie. Para verificar
que ya lo tienes instalado (y qu@'e versi@'on es), abre una consola y
escribe el siguiente comando:

@example
$ python3 --version
Python 3.6.1
@end example

Si tienes instalada una versi@'on diferente de Python, al menos 3.4.0
(por ejemplo 3.6.0), entonces no tienes que actualizar. Si tu no has
instalado Python, o si tu quieres una versi@'on diferente, primero
verifica que distribuci@'on de Linux est@'as usando con el siguiente
comando:

@example
$ grep ^NOMBRE= /etc/os-release
@end example

Despu@'es, dependiendo de el resultado, sigue una de las siguientes
gu@'{@dotless{i}}as de instalaci@'on bajo @'esta secci@'on.

@subsection Instalar Python: Debian o Ubuntu

Escribe este comando en tu consola:

@example
$ sudo apt install python3
@end example

@subsection Instalar Python: Fedora

Usa este comando en tu consola:

@example
$ sudo dnf install python3
@end example

Si estás en versiones antiguas de Fedora, puedes obtener un error que
el comando dnf no se encuentra. En ese caso, necesitas usar yum en su
lugar.

@subsection Instalar Python: openSUSE

Verifica si la instalación fue exitosa abriendo una terminal o
consola, y corriendo el comando python3:

@example
$ python3 --version
Python 3.6.1
@end example

La versión mostrada puede ser diferente desde 3.6.1 -- debería marcar
la versión que instalaste.

NOTA: Si está en Windows y recibe un mensaje de error que indica que
python3 no se encontró, intente usar python (sin el 3) y compruebe si
todavía podría ser una versión de Python que sea 3.4.0 o superior. Si
eso tampoco funciona, puede abrir un nuevo símbolo del sistema e
intentar nuevamente; Esto sucede si usa un símbolo del sistema abierto
antes de la instalación de Python.

Si tienes alguna duda, o si ocurrió algún error y no tienes idea sobre
qué hacer, ¡por favor pregunta a tu entrenador! Algunas veces las
cosas no van bien y es mejor pedir ayuda a alguien con más
experiencia.

@subsection Instala un Editor de Código

Hay muchos editores diferentes y la elección es principalmente una
cuestión de preferencia personal. La mayoría de programadores de
Python usan IDEs (Entornos de Desarrollo Integrados) complejos pero
muy potentes, como PyCharm. Sin embargo, como principiante,
probablemente no es lo más aconsejable; nuestras recomendaciones son
igualmente potentes pero mucho más simples.

Abajo presentamos nuestras sugerencias pero también puedes preguntarle
a tu mentora cuáles son las suyas -será más fácil que te ayude.

@subsection Visual Studio Code

Visual Studio Code es un recurso de edición de código desarrollado por
Microsoft para Windows, Linux y macOS. Esto incluye soporte para
depuración, control de Git incrustado, sintaxis destacada,
completación de código inteligente, fragmentos y refactorización de
código.

@subsection Gedit

Gedit es un editor gratuito de código abierto, disponible para todos
los sistemas operativos.

@subsection Sublime Text

Sublime Text es un editor muy popular con un periodo de prueba gratis,
y está disponible para todos los sistemas operativos.

@subsection Atom

Atom es otro editor popular. Es gratis, de código abierto y disponible
para Windows, OS X and Linux. Atom está desarrollado por Github.

@section ¿Por qué estamos instalando un editor de código?

Tú podrías estar preguntándote por qué estamos instalando este
especializado software editor de código en vez de usar algo como Word
o Notepad.

La primera razón es que el código necesita ser texto plano, y el
problema con programas como Word y Textedit es que no producen texto
plano, sino texto enriquecido (con fuentes y formatos), usando
formatos personalizados como RTF ( Formato del Texto Enriquecido, del
inglés Rich Text Format).

La segunda razón es que los editores de código están especializados
para esta función, así ellos pueden proveer ayuda a características
como destacar código con color acorde a su significado, o
automáticamente cerrando etiquetas para ti.

Veremos todo esto en acción más adelante. Pronto pensarás en convertir
el editor de código en una de tus herramientas favoritas. :)

@section Configura el entorno virtual (virtualenv) e instala Django

Parte de esta sección está basada en tutoriales por
@url{https://github.com/ggcarrots/django-carrots, Geek Girls Carrots}

Parte de este capítulo está basada en el django-marcador tutorial bajo
la licencia Creative Commons Attribution-ShareAlike 4.0
internacional. El tutorial de django-marcador tiene derechos de autor
de Markus Zapke-Gündemann et al.

@section Entorno virtual

Antes de instalar Django, instalaremos una herramienta extremadamente
útil que ayudará a mantener tu entorno de desarrollo ordenado en tu
computadora. Es posible saltarse este paso, pero es altamente
recomendable. ¡Empezar con la mejor configuración posible te ahorrará
muchos problemas en el futuro!

Así que, vamos a crear un entorno virtual (también llamado un
virtualenv). Virtualenv aísla tu configuración de Python/Django para
cada proyecto. Esto quiere decir que cualquier cambio que hagas en un
sitio web no afectará a ningún otro que estés desarrollando. Genial,
¿no?

Todo lo que necesitas hacer es encontrar un directorio en el que
quieras crear el virtualenv; tu directorio home, por ejemplo. En
Windows, puede verse como C:\Users\Name (donde Name es el nombre de tu
usuario).

@verbatim
NOTA: En Windows, asegúrate de que este directorio no contiene
caracteres especiales o acentuados; si tu nombre de usuario contiene
caracteres acentuados, usa un directorio distinto, por ejemplo
C:\djangogirls.
@end verbatim

Para este tutorial usaremos un nuevo directorio djangogirls en tu
directorio home:

@example
$ mkdir djangogirls
$ cd djangogirls
@end example

Haremos un virtualenv llamado myvenv. El comando general estará en el
formato:

@example
$ python3 -m venv myvenv
@end example

@subsection Entorno Virtual: Windows

Para crear un nuevo virtualenv, necesitas abrir una terminal "command
prompt" y ejecutar

@example
python -m venv myvenv
@end example

Se ver@'a as@'{@dotless{i}}:

@example
C:\Users\Name\djangogirls> python -m venv myvenv
@end example

Donde myvenv es el nombre de tu virtualenv. Puedes utilizar cualquier
otro nombre, pero asegúrate de usar minúsculas y no usar espacios,
acentos o caracteres especiales. También es una buena idea mantener el
nombre corto. ¡Vas utilizarlo muchas vecesl!

@subsection Entorno Virtual: Linux and OS X

Podemos crear un virtualenv en Linux y OS X, es tan sencillo como
ejecutar

@example
python3 -m venv myvenv
@end example

Se ver@'a as@'{@dotless{i}}:

myvenv es el nombre de tu virtualenv. Puedes usar cualquier otro
nombre, pero sólo utiliza minúsculas y no incluyas espacios. También
es una buena idea mantener el nombre corto. ¡Vas a referirte muchas
veces a él!

@verbatim
    NOTA: En algunas versiones de Debian/Ubuntu, puede que obtengas el
    siguiente error:

    The virtual environment was not created successfully because
       ensurepip is not available.

    En sistemas Debian/Ubuntu, tendrás que instalar el paquete
    python3-venv usando el siguiente comando.

    apt-get install python3-venv

    Puede que tengas que usar sudo con este comando.
    Después de instalar el paquete python3-venv, vuelve a crear tu
    entorno virtual.

    En este caso, sigue las instrucciones anteriores e instala el
    paquete python3-venv:

    $ sudo apt install python3-venv

    NOTA: En algunas versiones de Debian/Ubuntu inicializar el entorno
    virtual de esta manera da el siguiente error:

    Error: Command '['/home/eddie/Slask/tmp/venv/bin/python3', '-Im',
    'ensurepip', '--upgrade', '--default-pip']' returned non-zero exit
    status 1

    Para evitar esto, utiliza directamente el comando virtualenv.

    $ sudo apt-get install python-virtualenv
    $ virtualenv --python=python3.6 myvenv

    NOTA: Si obtienes un error como

    E: Unable to locate package python3-venv

    entonces ejecuta:

    sudo apt install python3.6-venv
@end verbatim

@section Trabajar con virtualenv

El comando anterior creará un directorio llamado myvenv (o cualquier
nombre que hayas elegido) que contiene nuestro entorno virtual
(básicamente un montón de archivos y carpetas).

@subsection Trabajando con virtualenv: Windows

Inicia el entorno virtual ejecutando:

@verbatim
C:\Users\Name\djangogirls> myvenv\Scripts\activate

    Nota: en 10 de Windows puedes obtener un error en Windows
    PowerShell que dice execution of scripts is disabled on this
    system. En este caso, abre otro Windows PowerShell con la opción
    "Ejecutar como administrador". Luego intenta escribir el siguiente
    comando antes de inicializar tu entorno virtual:

    C:\WINDOWS\system32 > Set-ExecutionPolicy -ExecutionPolicy
       RemoteSigned Execution Policy Change The execution policy helps
       protect you from scripts that you do not trust. Changing the
       execution policy might expose you to the security risks
       described in the about_Execution_Policies help topic at
       http://go.microsoft.com/fwlink/?LinkID=135170.

    Do you want to change the execution policy?
    [Y] Yes [A] Yes to All [N] No [L]
    No to All [S] Suspend [?] Help (default is "N"): A

    NOTA: Para usuarios del popular editor VS Code, el cual viene con
    una terminal integrada basada en el poweshell de windows; si
    deseas añadir la terminal integrada, puedes arrancar el siguiente
    comando para activar tu entorno virtual:

    $ . myvenv\Scripts\activate.ps1

    La ventaja es que no tienes que cambiar las ventanas entre el
    editor de código y la línea de comandos.
@end verbatim

@subsection Trabajando con virtualenv: Linux and OS X

Inicia el entorno virtual ejecutando:

@example
$ source myvenv/bin/activate
@end example

¡Recuerda reemplazar myvenv con tu nombre de virtualenv que hayas
elegido!

@verbatim
    NOTA: a veces source podría no estar disponible. En ese caso trata hacerlo de esta forma:

    command-line

    $ . myvenv/bin/activate
@end verbatim

Sabrás que tienes virtualenv iniciado cuando veas que la línea de
comando en tu consola tiene el prefijo (myvenv).

Cuando trabajes en un entorno virtual, python automáticamente se
referirá a la versión correcta, de modo que puedes utilizar python en
vez de python3.

Ok, tenemos todas las dependencias importantes en su
lugar. ¡Finalmente podemos instalar Django!

@section Instalar Django

Ahora que tienes tu virtualenv iniciado, puedes instalar Django.

Antes de hacer eso, debemos asegurarnos que tenemos la última versión
de pip, el software que utilizamos para instalar Django:

@example
(myvenv) ~$ python -m pip install --upgrade pip
@end example

@subsection Instalar paquetes con un fichero de requisitos (requirements)

Un fichero de requisitos (requirements) tiene una lista de
dependencias que se deben instalar mediante pip.

Primero crea un archivo requirements.txt dentro de tu directorio
djangogirls, usando el editor de código que instalaste previamente. Lo
puedes hacer mediante abriendo un nuevo archivo en el editor de código
y guardándolo como requirements.txt en el directorio djangogirls. Tu
directorio se verá así:

@verbatim
djangogirls
└───requirements.txt
@end verbatim

Dentro del fichero djangogirls/requirements.txt deberías tener el
siguiente texto:

@verbatim
Django~=2.2.4
@end verbatim

Ahora, ejecuta pip install -r requirements.txt para instalar Django.

@verbatim
(myvenv) ~$ pip install -r requirements.txt
Collecting Django~=2.2.4 (from -r requirements.txt (line 1))
  Downloading Django-2.2.4-py3-none-any.whl (7.1MB)
Installing collected packages: Django
Successfully installed Django-2.2.4
@end verbatim

@subsection{Instalando Django: Windows}

@verbatim
Si obtienes un error cuando llamas al pip en la plataforma de Windows,
por favor verifica si el nombre de ruta de tu proyecto contiene
espacios, acentos o caracteres especiales (por ejemplo,
C:\Usuarios\NombreUsuario\djangogirls). Si los tiene, utiliza otro en
su lugar sin espacios, acentos o caracteres especiales (sugerencia:
C:\djangogirls). Crea un nuevo virtualenv en el nuevo directorio,
luego borra el viejo y trata de escribir el comando anterior otra
vez. (Moviendo el directorio virtualenv no funcionará debido a que usa
rutas absolutas.)
@end verbatim

@subsection{Instalando Django: Windows 8 y Windows 10}

@verbatim
Tu línea de comando puede congelarse luego de intentar instalar Django. Si esto sucede, usa el siguiente comando:

    C:\Users\Name\djangogirls> python -m pip install -r requirements.txt
@end verbatim

@subsection{Instalando Django: Linux}

Si obtienes un error cuando llamas pip en Ubuntu 12.04, por favor
corre python -m pip install -U --force-reinstall pip para reparar la
instalación de pip en el virtualenv.

¡Eso es todo! Ahora estás lista (por fin) para crear una aplicación Django!

@section{Instalar Git}

Git es un "sistema de control de versiones" que utilizan muchos
programadores. Este software puede seguir los cambios realizados en
archivos a lo largo del tiempo de forma que más tarde puedas volver a
cualquier versión anterior. Algo similar a la herramienta de "Control
de Cambios" en los programas de tipo Word (por ejemplo, Microsoft Word
o LibreOffice Writer), pero mucho más potente.

@subsection{Installing Git: Windows}

Puedes descargar Git desde @url{https://git-scm.com/}. Puedes hacer
click en "Next" en todos los pasos excepto en dos: cuando se te
pregunte que selecciones tu editor, selecciona Nano, y en el paso
"adjusting your PATH environment", selecciona "Use Git and optional
Unix tools from the Windows Command Prompt" (la última opción). Aparte
de eso, los valores por defecto son correctos. "Checkout
Windows-style, commit Unix-style line endings" tampoco necesita
corrección.

No olvides reiniciar el Símbolo del Sistema o el PowerShell una vez
que la instalación se complete con éxito.

@subsection{Installing Git: OS X}

Descarga Git de @url{https://git-scm.com} y sigue las instrucciones.

    Nota Si estas usando OS X 10.6, 10.7 o 10.8, tendrás que instalar
    git desde aquí:
    @url{https://sourceforge.net/projects/git-osx-installer/files/git-2.3.5-intel-universal-snow-leopard.dmg/download, Git installer for OS X Snow Leopard}

@subsection{Installing Git: Debian or Ubuntu}

@example
$ sudo apt install git
@end example

@subsection{Installing Git: Fedora}

@example
$ sudo dnf install git
@end example

@subsection{Installing Git: openSUSE}

@example
$sudo zypper install git
@end example

@section{Crear una cuenta de GitHub}

Ve a GitHub.com y regístrate con una nueva y gratuita cuenta de
usuario. Asegúrate de recordar tu contraseña (añádela a tu gestor de
contraseñas, si usas uno).

@section{Crear una cuenta de PythonAnywhere}

PythonAnywhere es un servicio para ejecutar código Python en
servidores "en la nube". Lo vamos a usar para alojar nuestro sitio
para que esté disponible en Internet.

Almacenaremos del blog que estamos construyendo sobre Python
Anywhere. Crea una cuenta como "Principiante/Beginner" en Python
Anywhere (el modo gratuito está bien, no necesitas una tarjeta de
crédito).

@image{images/pythonanywhere_beginner_account_button,6in,,Plans and Pricing}

@verbatim
Nota Cuando elijas un nombre de usuario, recuerda que la URL de tu
blog tendrá la forma tunombredeusuario.pythonanywhere.com, así que lo
mejor será usar tu apodo o elegir un nombre que indique de qué trata
tu blog. Asegúrate también de recordar tu contraseña (añádela a tu
gestor de contraseñas, si usas uno).
@end verbatim

@subsection{Crear un token para la API de PythonAnywhere}

Este paso solo necesita ser completado una vez. Una vez que te hayas
registrado en PythonAnywhere, serás llevado a tu tablón
principal. Encontrarás el enlace a la página de tu "Cuenta" en la
esquina superior derecha:

Enlace de cuenta en la parte superior derecha de la página

Después selecciona la lengueta llamada "API token", y haz click en el
botón que dice "Crear nueva API token"

@image{images/pythonanywhere_create_api_token,6in,,Your API Token}

@subsection{Comienza a leer}

Felicitaciones, ¡tú tienes todo configurado y listo para avanzar! si
aún tienes tiempo antes del taller, sería útil empezar a leer un poco
de los capítulos iniciales:

@itemize @bullet
@item
@url{https://tutorial.djangogirls.org/es/how_the_internet_works/, ¿C@'omo funciona Internet?}

@item
@url{https://tutorial.djangogirls.org/es/intro_to_command_line/,
Introducci@'on a la l@'{@dotless{i}}nea de comandos}

@item
@url{https://tutorial.djangogirls.org/es/python_introduction/, Introducci@'on a Python}

@item
@url{https://tutorial.djangogirls.org/es/django/, ¿Qu@'e es Django?}

@end itemize


@subsection{¡Disfruta el taller!}

Cuando comiences el taller, estarás habilitada para ir directamente a
¡Tu primer proyecto en Django! porque ya cubriste el material en los
capítulos anteriores.

@node C@'omo funciona Internet
@chapter C@'omo funciona Internet
@cindex C@'omo funciona Internet


@verbatim
    Para lectores en casa: este capítulo está cubierto en el video
    @url{https://www.youtube.com/watch?v=oM9yAA09wdc, ¿Cómo funciona Internet?}.

    Este capítulo está inspirado en la charla "How the Internet works"
    de Jessica McKellar (@url{http://web.mit.edu/jesstess/www/}).
@end verbatim

Apostamos a que utilizas Internet todos los días. Pero, ¿sabes lo que
pasa cuando escribes una dirección como @url{http://djangogirls.org}
en tu navegador y presionas enter?

La primera cosa que necesitas entender, es que una página web consiste
de un puñado de archivos guardados en el disco duro -- como tus
películas, música, o imágenes. Sin embargo, hay una parte que es única
para los sitios web: ellos incluyen código computarizado llamado HTML.

Si no estás familiarizada con la programación, puede ser difícil de
comprender HTML a la primera, pero tus navegadores web (como Chrome,
Safari, Firefox, etc.) lo aman. Los navegadores están diseñados para
entender este código, seguir sus instrucciones y presentar estos
archivos de los cuales está hecho tu sitio web, exactamente de la
forma que quieres.

Como cualquier otro archivo, tenemos que guardar los archivos HTML en
algún lugar de un disco duro. Para Internet, utilizamos equipos
especiales, de gran alcance llamados servidores. Estos no tienen una
pantalla, ratón o teclado, debido a que su propósito es almacenar
datos y servirlos. Por esa razón son llamados servidores -- porque
sirven los datos.

OK, pero quieres saber cómo Internet se ve, ¿cierto?

¡Te hemos hecho una imagen! Luce algo así:

@image{images/internet_1,6in,,C@'omo funciona Internet}

Parece un lío, ¿no? De hecho, es una red de máquinas interconectadas
(los servidores que nombramos anteriormente). ¡Cientos de miles de
máquinas! ¡Muchos, muchos kilómetros de cables alrededor del mundo!
Puedes visitar el sitio web Submarine Cable Map
(@url{http://submarinecablemap.com/}) y ver lo complicada que es la
red. Aquí hay una captura de pantalla de la página web:

@image{images/internet_3,6in,,Submarine Cable Map}

Es fascinante, ¿no? Pero sería imposible tener un cable entre todas y
cada una de las máquinas conectadas a internet. Así que, para llegar a
una máquina (por ejemplo la que aloja @url{http://djangogirls.org})
tenemos que elevar una solicitud mediante una gran cantidad de
máquinas diferentes.

Se parece a esto:

@image{images/internet_3,6in,,Django Girls Internet Map}

Imagina que cuando escribes @url{http://djangogirls.org}, estas
enviando una carta que dice: "Estimadas Django Girls, me gustaría ver
su sitio web djangogirls.org. ¡Por favor, envíenmelo!"

Tu carta va hacia la oficina de correo más cercana. Luego va a otra
que es un poco más cerca de su destinatario, luego otra y otra hasta
que es entregada a su destino. La única cosa diferente es que si
envías muchas cartas (paquetes de datos) al mismo lugar, cada una
podría ir a través de oficinas de correos totalmente distintas
(routers). Esto depende de cómo se distribuyen en cada oficina.

@image{images/internet_3,6in,,Django Girls Email}

Así es como funciona - se envían mensajes y se espera una
respuesta. En lugar de papel y lápiz, se usan bytes de datos, pero ¡la
idea es la misma!

En lugar de direcciones con el nombre de la calle, ciudad, código
postal y nombre del país, utilizamos direcciones IP. Tu computadora
pide primero el DNS (Domain Name System - en español Sistema de
Nombres de Dominio) para traducir djangogirls.org a una dirección
IP. Funciona en cierta manera como los viejos directorios telefónicos
donde puedes buscar el nombre de la persona que se deseas contactar y
encontrar su número de teléfono y dirección.

Cuando envías una carta, esta necesita tener ciertas características
para ser entregada correctamente: una dirección, sello, etc. También
utilizas un lenguaje que el receptor pueda entender, ¿cierto? Lo mismo
se aplica a los paquetes de datos que envía para ver un sitio
Web. Utilizamos un protocolo llamado HTTP (Protocolo de transferencia
de hipertexto).

Así que, básicamente, cuando tienes un sitio web necesitas tener un
servidor (la máquina) donde este vive. Cuando el servidor recibe una
petición entrante (en una carta), este envía su sitio de Internet (en
otra carta).

Ya que este es un tutorial de Django, puede que te preguntes qué es lo
que Django hace. Bueno, cuando envías una respuesta, no siempre
quieres enviar lo mismo a todo el mundo. Es mucho mejor si tus cartas
son personalizadas, especialmente para la persona que acaba de
escribir, ¿cierto? Django nos ayuda con la creación de estas cartas
personalizadas. :)

Suficiente conversación - ¡tiempo de crear!

@node Introducción a la interfaz de línea de comandos
@chapter Introducción a la interfaz de línea de comandos
@cindex Introducción a la interfaz de línea de comandos

Para los lectores en casa: este capítulo puede verse en el vídeo Tu
nuevo amigo: Línea de Comandos.

Es emocionante, ¿verdad? ¡Vas a escribir tu primera línea de código en
pocos minutos! :)

Permítenos presentarte a tu primer amigo nuevo: ¡la línea de comandos!

Los siguientes pasos te mostrarán cómo usar aquella ventana negra que
todos los hackers usan. Puede parecer un poco aterrador al principio
pero es solo un mensaje en pantalla que espera a que le des órdenes.

Nota Ten en cuenta que a lo largo de este libro usamos los términos
'directorio' y 'carpeta' indistintamente pero son la misma cosa.

@section ¿Qué es la línea de comandos?

La ventana, que generalmente es llamada línea de comandos ó interfaz
de línea de comandos, es una aplicación basada en texto para ver,
manejar y manipular archivos en tu ordenador. Similar a Windows
Explorer o Finder en Mac, pero sin la interfaz gráfica. Otros nombres
para la línea de comandos son: cmd, CLI, prompt -símbolo de sistema-,
console -consola- o terminal.

@section Abrir la interfaz de línea de comandos

Para empezar con algunos experimentos necesitarás abrir nuestra
interfaz de línea de comandos en primer lugar.

@subsection Abriendo terminal: Windows

Dependiendo de tu versión de Windows y tu teclado, una de las opciones
siguientes debería abrir una ventana de comandos (puede que necesites
experimentar un poco, pero no se necesita probar todas estas
sugerencias):

Ve al menú o pantalla de Inicio, y escribe "Símbolo del Sistema" en el
cuadro de búsqueda.

@itemize @bullet
@item
Ve a Menú de inicio → Windows System → Command Prompt.
@item
Ve al menú de Inicio → Todos los Programas → Accessorios → Símbolo del
Sistema.
@item
Ve a la pantalla de Inicio, pasa el ratón sobre la esquina inferior
izquierda de la pantalla, y haz click en la flecha hacia abajo (en una
pantalla táctil, desliza hacia arriba desde la parte baja de la
pantalla). La página de la Aplicación debería abrirse. Haz click en
Símbolo del Sistema en la sección Sistema de Windows.
@item
Mantén la tecla especial de Windows de tu teclado y pulsa "X". Elige
"Símbolo del Sistema" del menú emergente.
@item
Mantén pulsada la tecla de Windows y pulsa "R" para abrir una ventana
"Ejecutar". Escribe "cmd" en la caja, y haz click en OK.
@end itemize

@image{images/windows-plus-r,6in,,Windows Commands}

Más adelante en este tutorial, necesitarás tener dos consolas de
comandos abiertas a la misma vez. Sin embargo, en algunas versiones de
Windows, si ya tienes abierta una ventana de comandos e intentas abrir
otra usando el mismo método, simplemente maximizará la que ya tienes
abierta. ¡Inténtalo ahora en tu ordenador y mira qué ocurre! Si solo
se abre una ventana de comandos, intenta alguno de los otros métodos
explicados anteriormente. Al menos uno de ellos debería abrir una
nueva ventana de comandos.

@subsection Abriendo terminal: OS X

Ve a Aplicaciones → Utilidades → Terminal.

@subsection Abriendo terminal: Linux

Probablemente se encuentre en Aplicaciones → Accesorios → Terminal, o
Aplicaciones → Sistema → Terminal, aunque esto dependerá de tu
sistema. Si no lo encuentras allí, intenta buscarlo en Google. :)

@section Símbolo del Sistema (Prompt)

Ahora deberías ver una pantalla blanca o negra que espera a que
introduzcas tus comandos.

@subsection Prompt: OS X and Linux

Si estás en Mac o Linux, probablemente veas una $, como ésta:

$

@subsection Prompt: Windows

En Windows, probablemente veas un >, como éste:

>

Echa un vistazo a la sección anterior sobre Linux -- podrás consultar
más cuando llegues a PythonAnywhere más adelante en este tutorial.

Cada comando vendrá precedido por un $ o un > y un espacio, pero no
debes escribirlos tú mismo. El ordenador lo hará por ti. :)

@verbatim
Solo una pequeña anotación: en tu caso puede que haya algo como
C:\Users\ola> o Olas-MacBook-Air:~ ola$ antes del símbolo de
introducción, lo cual es 100% NORMAL.
@end verbatim

La parte superior incluye el $ o el > que es llamado en la línea de
comandos, o mas corto prompt. Introduce algo allí.

En el tutorial, cuando queramos introducir un comando, incluye el $ o
>, y ocasionalmente más a la izquierda. Ignora la parte izquierda
solamente escribiendo el comando, el cuál inicia después del prompt.

@section Tu primer comando (¡BIEN!)

Comencemos tecleando este comando:

@subsection Your first command: OS X and Linux

$ whoami

@subsection Your first command: Windows

Y luego presiona enter. Esto será nuestro resultado:

$ whoami olasitarska

Como puedes ver, el computador solo ha impreso tu nombre de usuario. Ordenado, ¿ah? :)

    Intenta escribir cada comando; no copies y pegues. ¡De esta manera lo recordarás!

@section Fundamentos

Cada sistema operativo tiene un poco diferente la configuración de los
comandos para la consola, así que asegurate de seguir las
instrucciones para tu sistema operativo. Intentemos esto, ¿Verdad?

@section Directorio actual

Sería bueno saber dónde estamos ahora, ¿Correcto? Veamos. Escribe éste
comando y presiona

@subsection Current directory: OS X and Linux

@example
$ pwd
/Users/olasitarska
@end example

    Nota: 'pwd' es para imprimir el directorio de trabajo (print working directory).

@subsection Current directory: Windows

@example
> cd 
C:\Users\olasitarska
@end example

    Nota: 'cd' es para cambiar de directorio (change directory). Con la consola tu puedes usar pwd solo con Linux o Mac OS X.

Probablemente veremos algo similar en tu computador. Una vez que abres
la consola o la línea de comandos, usualmente inicias en tu directorio
principal.

@section Aprende más sobre un comando

¡Muchos comandos pueden escribirse en el prompt que tiene construido
una ayuda que puedes leer! Por ejemplo, aprende más acerca de el
comando del directorio actual:

@subsection Command help: OS X and Linux

OS X y Linux tienen un comando man, el cual te da una ayuda en
comandos. Intenta man pwd y ve qué dice, o coloca man antes de otro
comando para ver su ayuda. La salida de man nomalmentes es
paginada. Usa la barra de espacio para moverte a la siguiente página,
y q para salir de la ayuda.

@subsection Command Help: Windows

Añade un sufijo /? para más comandos que se imprimirán en la página de
ayuda. Puedes hacer scroll a la ventana de comandos para verlos
todos. Intenta cd /?.

@section Listar ficheros y directorios

Así que, ¿en qué estamos? Estaría bien saberlo. Veamos:

@subsection Listar ficheros y directorios: OS X y Linux

@example
$ ls
Applications
Desktop
Downloads
Music
...
@end example

@subsection Listar ficheros y directorios: Windows

@example
> dir
Directory of C:\Users\olasitarska
05/08/2014 07:28 PM <DIR> Applications
05/08/2014 07:28 PM <DIR> Desktop
05/08/2014 07:28 PM <DIR> Downloads
05/08/2014 07:28 PM <DIR> Music
...
@end example

Nota: En consola tu puedes usar también 'ls' como en Linux y Mac OS X. 

@section Cambiar el directorio actual

Ahora, vamos a nuestro directorio de escritorio:

@subsection Cambiar el directorio actual: OS X

@example
$ cd Desktop
@end example

Verifica si está cambiado actualmente:

@example
$ pwd /Users/olasitarska/Desktop
@end example

@subsection Cambiar el directorio actual: Linux

@example
$ cd Escritorio
@end example

Verifica si está cambiado actualmente:

@example
$ pwd /Users/olasitarska/Desktop
@end example


Nota que el nombre del directorio "Escritorio" puede ser traducido al
lenguaje de tu cuenta de Linux. Si ese es el caso, necesitarás
reemplazar Escritorio con la traducción del nombre; por ejemplo,
Desktop para el inglés.

@subsection Cambiar el directorio actual: Windows

@example
> cd Escritorio
@end example

Verifica si está cambiado actualmente:

@example
> cd C:\Users\olasitarska\Desktop
@end example

¡Aquí está!

PRO tip: si escribes cd D y luego presionas tab en tu teclado, la
línea de comandos automáticamente llenará el resto de el nombre por el
que puedes navegar. Si hay mas que una carpeta iniciando con "D",
presiona la tecla tab dos veces para obtener una lista de opciones.

@section Crear un directorio

¿Cómo crear un práctico directorio para tu escritorio? Puedes hacerlo
de esta manera:

@subsection Crear directorio: OS X y Linux

@example
$ mkdir practice
@end example

@subsection Crear directorio: Windows

@example
> mkdir practice
@end example

Este pequeño comando creará una carpeta con el nombre práctica en tu
computador. ¡Puedes verificar si está allí en tu Escritorio o
ejecutando uno de los siguientes comandos ls o dir! Inténtalo. :)

PRO tip: Si no quieres escribir el mismo comando una y otra vez,
intenta presionando la flecha arriba y flecha abajo en tu teclado
para regresar a través de los comandos recientemente usados.

@subsection ¡Ejercicio!

Un pequeño reto para ti: en tu nuevo directorio creado práctica, crea
un directorio llamado prueba. (Usa los comandos cd y mkdir.)

Soluci@'on en OS X y Linux:

@example
$ cd practica
$ mkdir prueba
$ ls
prueba
@end example

Soluci@'on en Windows:

@example
> cd practica
> mkdir prueba
> dir
05/08/2014 07:28 PM <DIR>      prueba
@end example

¡Felicidades! :)

@subsection Limpieza

No queremos dejar un enredo, así que removamos todo lo que hicimos
hasta este momento.

Primero, necesitamos regresar al Escritorio:

En OS X y GNU/Linux:

@example
$ pwd /Users/olasitarska/Desktop
@end example

En Windows:

@example
> cd C:\Users\olasitarska\Desktop
@end example

Es hora de eliminar el directorio practica:

En OS X y GNU/Linux:

@example
$ rm -r practice
@end example

En Windows:

@example
> rmdir /S practica
practica, ¿Estás segur@<Y/N>? Y
@end example

¡Hecho! Estás seguro que lo eliminaste realmente, verifica:

En OS X y GNU/Linux:

@example
$ ls
@end example

En Windows:

@example
> dir
@end example

@subsection Salir

¡Eso es todo por ahora! Tú puedes ahora cerrar la línea de comandos o
consola sin problemas. Hazlo como un hacker, ¿vale? :)

En OS X y GNU/Linux:

@example
$ exit
@end example

En Windows:

@example
> exit
@end example

Genial, ¿no? :)

@subsection Resumen

Aquí está un resumen de algunos comandos útiles:

@multitable @columnfractions .15 .20 .35 .30
@headitem Comando (win) @tab Comando (Mac/Lin) @tab Descripci@'on @tab Ejemplo
@item exit
@tab exit
@tab Cierra la ventana
@tab exit
@item cd
@tab cd
@tab Cambia el directorio
@tab cd test
@item cd
@tab pwd
@tab Mostrar el directorio actual
@tab cd (Win) o pwd (Mac/Lin)
@item dir
@tab ls
@tab Lista directorios/archivos
@tab dir
@item copy
@tab cp
@tab Copia de archivos
@tab copy c:\test\test.txt c:\windows\test.txt
@item move
@tab mv
@tab Mueve archivos
@tab move c:\test\test.txt c:\windows\test.txt
@item mkdir
@tab mkdir
@tab Crea un nuevo archivos
@tab mkdir testdirectory
@item rmdir (o del)
@tab rm 
@tab Eliminar archivo
@tab del c:\test\test.txt
@item rmdir /S
@tab rm -r
@tab Eliminar directorio
@tab rm -r testdirectory
@item [CMD] /?
@tab man [CMD]
@tab Obtener ayuda para un comando
@tab cd /? (Win) o man cd (Mac OS / Lin)
@end multitable

Estos son solo algunos de los comandos que puedes ejecutar en tu línea
de comando o consola, pero no usarás ninguno más por hoy.

Si eres curios@, ss64.com contiene una referencia completa de comandos
para todos los sistemas operativos.

@subsection ¿Lista? ¿Listo?

¡Vamos a bucear en Python!

@node Introducción a Python
@chapter Introducción a Python
@cindex Introducción a Python

Parte de este capítulo se basa en tutoriales de
@url{https://github.com/ggcarrots/django-carrots, Geek Girls Carrots}.

¡Escribamos algo de código!

@section La Consola de Python

Para los lectores en casa:
@url{https://www.youtube.com/watch?v=MO63L4s-20U, el vídeo conceptos
básicos de Python: enteros, cadenas, listas, variables y errores} cubre
esta parte.

Para empezar a jugar con Python, tenemos que abrir una línea de
comandos en nuestra computadora. Deberías saber cómo hacerlo, pues lo
aprendiste en el capítulo de
@url{https://tutorial.djangogirls.org/es/intro_to_command_line/,
Introducción a la Línea de Comandos}

Una vez que estés lista, sigue las instrucciones a continuación.

Queremos abrir una consola de Python, así que escribe python en
Windows o python3 en Mac OS/Linux y pulsa intro.

@example
$ python3
Python 3.6.1 (...)
Type "help", "copyright", "credits" or "license" for more information.
>>>
@end example

@section Tu primer comando Python

Después de ejecutar el comando de Python, el cursor cambiará a
>>>. Para nosotros esto significa que por ahora sólo podemos utilizar
comandos del lenguaje Python. No tienes que escribir >>> pues Python
lo hará por ti.

Si deseas salir de la consola de Python en cualquier momento, solo
escribe exit() o usa el atajo Ctrl + Z para Windows y Ctrl + D para
Mac/Linux. Luego no verás más >>>.

Por ahora, no queremos salir de la consola de Python. Deseamos
aprender más sobre ella. Vamos a comenzar escribiendo algo de
matemática, escribe 2 + 3 y oprime la tecla enter.

@example
>>> 2 + 3
5
@end example

¡Qué bien! ¿Ves cómo salió la respuesta? ¡Python sabe matemática!
Puedes probar otros comandos como:

@example
    4 * 5
    5 - 1
    40 / 2
@end example

Para realizar una operación exponencial, digamos 2 elevado al cubo,
escribimos:

@example
>>> 2 ** 3
8
@end example

Diviértete con esto por un momento y luego vuelve aquí. :)

Como puedes ver, Python es una gran calculadora. Si te estás
preguntando qué más puedes hacer ...

@section Cadena de caracteres

¿Qué tal tu nombre? Escribe tu nombre entre comillas, así:

@example
>>> "Ola"
'Ola'
@end example

¡Has creado tu primera cadena de texto! La misma es una secuencia de
caracteres que puede ser procesada por una computadora. La cadena de
texto (o string, en inglés) debe comenzar y terminar con el mismo
carácter. Pueden ser comillas simples (') o dobles (") (¡no hay
ninguna diferencia!) Las comillas le dicen a Python que lo que está
dentro de ellas es una cadena de texto.

Las cadenas pueden estar concatenadas. Prueba esto:

@example
>>> "Hola " + "Ola"
'Hola Ola'
@end example

También puedes multiplicar las cadenas por un número:

@example
>>> "Ola" * 3
'OlaOlaOla'
@end example

Si necesitas poner un apóstrofe dentro de una cadena, hay dos formas
de hacerlo.

Usar comillas dobles:

@example
>>> "Runnin' down the hill"
"Runnin' down the hill"
@end example

o escapar el apóstrofe con la diagonal inversa (``):

@example
>>> 'Runnin\' down the hill'
"Runnin' down the hill"
@end example

Bien, ¿eh? Para ver tu nombre en letras mayúsculas, escribe:

@example
>>> "Ola".upper()
'OLA'
@end example

¡Acabas de usar el método upper sobre tu cadena de texto! Un método
(como upper()) es un conjunto de instrucciones que Python tiene que
realizar sobre un objeto determinado ("Ola") una vez que se le invoca.

Si quieres saber el número de letras que contiene tu nombre, ¡también
hay una función para eso!

@example
>>> len("Ola")
3
@end example

Te preguntarás ¿por qué a veces se invoca a las funciones con un . al
final de una cadena (como "Ola".upper()) y a veces se invoca a la
función colocando la cadena entre paréntesis? Bueno, en algunos casos
las funciones pertenecen a los objetos, como upper(), que sólo puede
ser utilizada sobre cadenas. En este caso, a la función le llamamos
método. Otra veces, las funciones no pertenecen a ningún objeto
específico y pueden ser usadas en diferentes objetos, como len(). Esta
es la razón de por qué estamos pasando "Ola" como un parámetro a la
función len.

@section Resumen

Ok, es suficiente sobre las cadenas. Hasta ahora has aprendido sobre:

@itemize @bullet
@item
La terminal - teclear comandos (código) en la terminal de Python resulta en respuestas de Python
@item
Números y strings - en Python los números son usados para matemáticas
y strings (cadenas de caracteres) para objetos de texto
@item
Operadores - como + y *, combinan valores para producir uno nuevo
@item
Funciones - como upper() y len(), ejecutan acciones sobre los objetos.
@end itemize

Estos son los conocimientos básicos que puedes aprender de cualquier
lenguaje de programación. ¿Lista para algo más difícil? ¡Seguro que lo
estás!

@section Errores

Vamos a intentar algo nuevo. ¿Podemos obtener la longitud de un número
de la misma manera que pudimos averiguar la longitud de nuestro
nombre? Escribe len(304023) y pulsa enter:

@example
>>> len(304023)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: object of type 'int' has no len()
@end example

¡Pues tenemos nuestro primer error! El icono de es nuestra manera de
darte un aviso de que el código que estás ejecutando no funciona como
se espera. ¡Cometer errores (incluso algunos intencionales) son una
parte importante del aprendizaje!

Dicho error dice que los objetos de tipo "int" (números enteros) no
tienen longitud. ¿Qué podemos hacer ahora? ¿Quizás podamos escribir el
número como una cadena? Las cadenas tienen longitud, ¿verdad?

@example
>>> len(str(304023))
6
@end example

¡Funcionó! Hemos utilizado la función str dentro de la función
len. str() convierte todo en cadenas de texto.

@itemize @bullet
@item
La función str convierte cosas en cadenas, strings
@item
La función int convierte cosas en enteros, integers
@end itemize

Importante: podemos convertir números en texto, pero no necesariamente
podemos convertir texto en números - ¿qué sería int('hello')?

@section Variables

Un concepto importante en la programación son las variables. Una
variable no es más que un nombre para algo, de forma que puedas usarlo
más tarde. Los programadores usan estas variables para almacenar
datos, hacer su código más legible y para no tener que recordar qué es
cada cosa.

Supongamos que queremos crear una nueva variable llamada name:

@example
>>> name = "Ola"
@end example

Indicamos que el nombre es igual a Ola.

Como habrás notado, tu programa no devolvió nada como lo hacía
antes. Así que ¿cómo sabemos que la variable existe realmente? Escribe
name y pulsa intro:

@example
>>> name
'Ola'
@end example

¡Genial! ¡Tu primera variable :)! Siempre puedes cambiar a lo que se
refiere:

@example
>>> name = "Sonja"
>>> name
'Sonja'
@end example

También puedes usarla dentro de funciones:

@example
>>> len(name)
5
@end example

Increíble, ¿verdad? Por supuesto, las variables pueden ser cualquier
cosa, ¡también números! Prueba esto:

@example
>>> a = 4
>>> b = 6
>>> a * b
24
@end example

Pero ¿qué pasa si usamos el nombre equivocado? ¿Puedes adivinar qué
pasaría? ¡Vamos a probar!

@example
>>> city = "Tokyo"
>>> ctiy
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'ctiy' is not defined
@end example

¡Un error! Como puedes ver, Python tiene diferentes tipos de errores y
este se llama NameError. Python te dará este error si intentas
utilizar una variable que no ha sido definida aún. Si más adelante te
encuentras con este error, verifica tu código para ver si no has
escrito mal una variable.

¡Juega con esto un rato y descubre qué puedes hacer!

@section La función print

Intenta esto:

@example
>>> name = 'Maria'
>>> name
'Maria'
>>> print(name)
Maria
@end example

Cuando sólo escribes name, el intérprete de Python responde con la
representación en forma de cadena de la variable 'name', que son las
letras M-a-r-i-a, rodeadas de comillas simples ''. Cuando dices
print(name), Python va a "imprimir" el contenido de la variable a la
pantalla, sin las comillas, que es más claro.

Como veremos después, print() también es útil cuando queremos imprimir
cosas desde adentro de las funciones, o cuando queremos imprimir cosas
en múltiples líneas.

@section Listas

Además de cadenas y enteros, Python tiene toda clase de tipos de
objetos diferentes. Ahora vamos a introducir uno llamado list. Las
listas son exactamente lo que piensas que son: objetos que son listas
de otros objetos. :)

Anímate y crea una lista:

@example
>>> []
[]
@end example

Sí, esta lista está vacía. No es muy útil, ¿verdad? Vamos a crear una
lista de números de lotería. No queremos repetirnos todo el rato, así
que la pondremos también en una variable:

@example
>>> lottery = [3, 42, 12, 19, 30, 59]
@end example

Muy bien, ¡tenemos una lista! ¿Qué podemos hacer con ella? Vamos a ver
cuántos números de lotería hay en la lista. ¿Tienes alguna idea de qué
función deberías usar para eso? ¡Ya lo sabes!

@example
>>> len(lottery)
6
@end example

No devuelve nada, sólo ha cambiado el orden en que los números
aparecen en la lista. Vamos a imprimirla otra vez y ver qué ha pasado:

@example
>>> print(lottery)
[3, 12, 19, 30, 42, 59]
@end example

Como puedes ver, los números de tu lista ahora están ordenados de
menor a mayor. ¡Enhorabuena!

¿Te gustaría invertir ese orden? ¡Vamos a hacerlo!

@example
>>> lottery.reverse()
>>> print(lottery)
[59, 42, 30, 19, 12, 3]
@end example

Si quieres añadir algo a tu lista, puedes hacerlo escribiendo este
comando:

@example
>>> lottery.append(199)
>>> print(lottery)
[59, 42, 30, 19, 12, 3, 199]
@end example

Si deseas mostrar sólo el primer número, puedes hacerlo mediante el
uso de indexes (en español, índices). Un índice es el número que te
dice dónde en una lista aparece un ítem. Las programadoras y los
programadores prefieren comenzar a contar desde 0, por lo tanto el
primer objeto en tu lista está en el índice 0, el próximo esta en el
1, y así sucesivamente. Intenta esto:

@example
>>> print(lottery[0])
59
>>> print(lottery[1])
42
@end example

Como puedes ver, puedes acceder a diferentes objetos en tu lista
utilizando el nombre de la lista y el índice del objeto dentro de
corchetes.

Para borrar algo de tu lista tendrás que usar índices como aprendimos
anteriormente y la función pop(). Vamos a tratar de ejemplificar esto
y reforzaar lo que aprendimos anteriormente; vamos a borrar el primer
número de nuestra lista.

@example
>>> print(lottery)
[59, 42, 30, 19, 12, 3, 199]
>>> print(lottery[0])
59
>>> lottery.pop(0)
59
>>> print(lottery)
[42, 30, 19, 12, 3, 199]
@end example

¡Funcionó de maravilla!

Para diversión adicional, prueba algunos otros índices: 6, 7, 1000,
-1, -6 ó -1000. A ver si puedes predecir el resultado antes de
intentar el comando. ¿Tienen sentido los resultados?

Puedes encontrar una lista de todos los métodos disponibles para
listas en este capítulo de la documentación de Python:
@url{https://docs.python.org/3/tutorial/datastructures.html}

@section Diccionarios

Para lectores en casa: este capítulo está cubierto en el video
@url{https://www.youtube.com/watch?v=ZX1CVvZLE6c, Bases de Python:
Diccionarios.}

Un diccionario es similar a una lista, pero accedes a valores usando
una llave en vez de un índice. Una llave puede ser cualquier cadena o
número. La sintaxis para definir un diccionario vacío es:

@example
>>> {}
{}
@end example

Esto demuestra que acabas de crear un diccionario vacío. ¡Hurra!

Ahora, trata escribiendo el siguiente comando (intenta reemplazando
con tu propia información):

@example
>>> participant = {'name': 'Ola', 'country': 'Poland', 'favorite_numbers': [7, 42, 92]}
@end example

Con este comando, acabas de crear una variable llamada participant con
tres pares llave-valor:

@itemize @bullet
@item
La llave name apunta al valor 'Ola' (un objeto string),
@item
country apunta a 'Poland' (otro string),
@item
y favorite_numbers apunta a [7, 42, 92] (una list con tres números en ella).
@end itemize

Puedes verificar el contenido de claves individuales con esta sintaxis:

@example
>>> print(participant['name'])
Ola
@end example

Lo ves, es similar a una lista. Pero no necesitas recordar el índice -
sólo el nombre.

¿Qué pasa si le pedimos a Python el valor de una clave que no existe?
¿Puedes adivinar? ¡Pruébalo y verás!

@example
>>> participant['age']
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 'age'
@end example

¡Mira, otro error! Este es un KeyError. Python te ayuda y te dice que
la llave 'age' no existe en este diccionario.

¿Cuando deberías usar un diccionario o una lista? Bueno, es un buen
punto para reflexionar. Piensa sobre la respuesta, antes de mirar una
solución en la siguiente línea.

@itemize @bullet
@item
¿Sólo necesitas una secuencia ordenada de elementos? Usa una lista.
@item
¿Necesitas asociar valores con claves, así puedes buscarlos
eficientemente (usando las claves) más adelante? Utiliza un
diccionario.
@end itemize

Los diccionarios, como las listas, son mutables, lo que quiere decir
que pueden ser modificados después de ser creados. Puedes agregar
nuevos pares llave/valor a un diccionario luego de crearlo, como:

@example
>>> participant['favorite_language'] = 'Python'
@end example

Como las listas, usando el método len() en los diccionarios devuelven
el número de pares llave-valor en el diccionario. Adelante escribe el
comando:

@example
>>> len(participant)
4
@end example

Espero tenga sentido hasta ahora. :) ¿Listo para más diversión con
diccionarios? Salta a la siguiente línea para algunas cosas
sorprendentes.

Puedes utilizar el comando pop() para borrar un elemento en el
diccionario. Por ejemplo, si deseas eliminar la entrada
correspondiente a la clave 'favorite_numbers', tienes que escribir el
siguiente comando:

@example
>>> participant.pop('favorite_numbers')
[7, 42, 92]
>>> participant
{'country': 'Poland', 'favorite_language': 'Python', 'name': 'Ola'}
@end example

Como puedes ver en la salida, el par de llave-valor correspondiente a
la llave 'favorite_numbers' ha sido eliminado.

Además de esto, también puedes cambiar un valor asociado a una llave
ya creada en el diccionario. Escribe:

@example
>>> participant['country'] = 'Germany'
>>> participant
{'country': 'Germany', 'favorite_language': 'Python', 'name': 'Ola'}
@end example

Como puedes ver, el valor de la llave 'country' ha sido modificado de
'Poland' a 'Germany'. :) ¿Emocionante? ¡Hurra! Has aprendido otra cosa
asombrosa.

@section Resumen

¡Genial! Sabes mucho sobre programación ahora. En esta última parte
aprendiste sobre:

@itemize @bullet
@item
Errores - ahora sabes cómo leer y entender los errores que aparecen si Python no entiende un comando
@item
Variables - nombres para los objetos que te permiten codificar más fácilmente y hacer el código más legible
@item
listas - listas de objetos almacenados en un orden determinado
@item
diccionarios - objetos almacenados como pares llave-valor
@end itemize

¿Emocionada por la siguiente parte? :)

@section Compara cosas

Para lectores en casa: este capítulo está cubierto en el vídeo
@url{https://www.youtube.com/watch?v=7bzxqIKYgf4, Bases de Python:
Comparaciones.}

Buena parte de la programación incluye comparar cosas. ¿Qué es lo más
fácil para comparar? Números, por supuesto. Vamos a ver cómo funciona:

@example
>>> 5 > 2
True
>>> 3 < 1
False
>>> 5 > 2 * 2
True
>>> 1 == 1
True
>>> 5 != 2
True
@end example

Le dimos a Python algunos números para comparar. Como puedes ver,
Python no sólo puede comparar números, sino que también puede comparar
resultados de funciones. Bien, ¿eh?

¿Te preguntas por qué pusimos dos signos igual == al lado del otro
para comparar si los números son iguales? Utilizamos un solo = para
asignar valores a las variables. Siempre, siempre es necesario poner
dos == Si deseas comprobar que las cosas son iguales entre sí. También
podemos afirmar que las cosas no son iguales a otras. Para eso,
utilizamos el símbolo !=, como mostramos en el ejemplo anterior.

Da dos tareas más a Python:

@example
>>> 6 >= 12 / 2
True
>>> 3 <= 2
False
@end example

Hemos visto > y <, pero, ¿qué significan >= y <=? Los puedes leer así:

@itemize @bullet
@item
x > y significa: x es mayor que y
@item
x < y significa: x es menor que y
@item
x <= y significa: x es menor o igual que y
@item
x >= y significa: x es mayor o igual que y
@end itemize

¡Genial! ¿Quieres hacer uno más? Intenta esto:

@example
>>> 6 > 2 and 2 < 3
True
>>> 3 > 2 and 2 < 1
False
>>> 3 > 2 or 2 < 1
True
@end example

Puedes darle a Python todos los números para comparar que quieras, y
siempre te dará una respuesta. Muy inteligente, ¿verdad?

@itemize @bullet
@item
and - si utilizas el operador and, ambas comparaciones deben ser True
para que el resultado de todo el comando sea True
@item
or - si utilizas el operador or, sólo una de las comparaciones tiene
que ser True para que el resultado de todo el comando sea True
@end itemize

¿Has oído la expresión "comparar manzanas con naranjas"? Vamos a
probar el equivalente en Python:

@example
>>> 1 > 'django'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: '>' not supported between instances of 'int' and 'str'
@end example

Aquí verás que al igual que en la expresión, Python no es capaz de
comparar un número (int) y un string (str). En cambio, muestra un
TypeError y nos dice que los dos tipos no se pueden comparar.

@section Boolean

Incidentalmente, acabas de aprender sobre un nuevo tipo de objeto en
Python. Se llama Boolean (booleano).

Hay sólo dos objetos booleanos:

@itemize @bullet
@item
True - verdadero
@item
False - falso
@end itemize

Pero para que Python entienda esto, siempre los tienes que escribir de
modo 'True' (la primera letra en mayúscula, con el resto de las letras
en minúscula). true, TRUE, y tRUE no funcionarán – solamente True es
correcta. (Lo mismo aplica también para 'False'.)

Los valores booleanos pueden ser variables, también. Ve el siguiente
ejemplo:

@example
>>> a = True
>>> a
True
@end example

También puedes hacerlo de esta manera:

@example
>>> a = 2 > 5
>>> a
False
@end example

Practica y diviértete con los booleanos ejecutando los siguientes
comandos:

@itemize @bullet
@item
True and True
@item
False and True
@item
True or 1 == 1
@item
1 != 2
@end itemize

¡Felicidades! Los booleanos son una de las funciones más geniales en
programación y acabas de aprender cómo usarlos.

@section ¡Guárdalo!

Para lectores en casa: este capítulo está cubierto en el vídeo Bases
de Python: @url{https://www.youtube.com/watch?v=dOAg6QVAxyk, Guardando
archivos y condicionales}.

Hasta ahora hemos escrito todo nuestro código Python en el intérprete,
lo cual nos limita a ingresar una línea de código a la
vez. Normalmente los programas son guardados en archivos y son
ejecutados por el intérprete o compilador de nuestro lenguaje de
programación. Hasta ahora, hemos estado corriendo nuestros programas
de a una línea por vez en el intérprete de Python. Necesitaremos más
de una línea de código para las siguientes tareas, entonces
necesitaremos hacer rápidamente lo que sigue:

@itemize @bullet
@item
Salir del intérprete de Python
@item
Abrir el editor de texto de nuestra elección
@item
Guardar algo de código en un nuevo archivo de Python
@item
¡Ejecutarlo!
@end itemize

Para salir del intérprete de Python que hemos estado usando, escribe exit()

@example
>>> exit()
$
@end example

Esto te llevará de vuelta a la línea de comandos.

Anteriormente, seleccionamos un editor de código de la sección
</a>editor de código</0>. Necesitaremos abrir el editor ahora y
escribir algo de código en un nuevo archivo (o si está usando un
Chromebook, cree un nuevo archivo en el IDE de la nube y abra el
archivo, que estará en el editor de código incluido):

@example
print('Hello, Django girls!')
@end example

Obviamente, ahora eres una desarrolladora Python muy experimentada,
asi que si@'entete libre de escribir algo del código que has aprendido
hoy.

Ahora tenemos que guardar el archivo y asignarle un nombre
descriptivo. Vamos a llamar al archivo python_intro.py y guardarlo en
tu escritorio. Podemos nombrar el archivo como queramos, pero la parte
importante es asegurarse de que termina en .py. La extensión .py le
dice a nuestro sistema operativo que es un archivo ejecutable de
python y Python lo puede ejecutar.

Nota Deberías notar una de las cosas más geniales de los editores de
código: ¡los colores! En la consola de Python, todo era del mismo
color, ahora deberías ver que la función print es de un color
diferente a la cadena en su interior. Esto de denomina "sintaxis
resaltada", y es una característica muy útil cuando se programa. El
color de las cosas te dará pistas, como cadenas no cerradas o errores
tipográficos en un nombre clave (como def en una función, que veremos
a continuación). Esta es una de las razones por las cuales usar un
editor de código. :)

Con el archivo guardado, ¡es hora de ejecutarlo! Utilizando las
habilidades que has aprendido en la sección de línea de comandos,
utiliza la terminal para cambiar los directorios e ir al escritorio.

En OS X:

@example
$ cd ~/Desktop
@end example

En Linux:

@example
$ cd ~/Desktop
@end example

En Windows:

@example
> cd %HomePath%\Desktop
@end example

En Windows Power Shell:

@example
> cd $Home\Desktop
@end example

Si estás atascada, pide ayuda. ¡Eso es exactamente lo que hacen las
entrenadoras!

Ahora usa Python para ejecutar el código en el archivo como esto:

@example
$ python3 python_intro.py
Hello, Django girls!
@end example

Nota: en Windows 'python3' no es reconocido como un comando. En su
lugar, usa 'python' para ejecutar el archivo:

@example
> python python_intro.py
@end example

¡Correcto! Ahora corriste tu primer programa de Python que fue
guardado en un archivo. ¿Se siente increíble?

Puedes ahora moverte a una herramienta esencial en programación:

@section If … elif … else

Muchas de las cosas en código debería ser ejecutadas solo cuando las
condiciones son conocidas. Eso es por qué Python lo ha llamado
sentencias if.

Reemplaza el código en tu archivo python_intro.py con esto:

@example
if 3 > 2:
@end example

Si guardáramos y corriéramos esto, veríamos un error como éste:

@example
$ python3 python_intro.py
File "python_intro.py", line 2
         ^
SyntaxError: unexpected EOF while parsing
@end example

Python nos espera dar nuevas instrucciones, las cuales son ejecutadas
si la condición 3 > 2 torna a ser verdadera (o True para ese
caso). Intentemos imprimir en Python "¡Funciona!". Cambia el código de
tu archivo python_intro.py a esto:

@example
if 3 > 2:
    print('It works!')
@end example

¿Notas cómo estamos indentando la siguiente línea de código con 4
espacios? Nosotros necesitamos hacer esto para que Python comprenda
que el código se ejecuta si el resultado es verdadero. Tú puedes poner
un espacio, pero prácticamente todos los programadores en Python ponen
4 espacios para hacer el código más legible. Un simple tabulador
también contará como 4 espacios tan largos como tu editor de texto
esté configurado. Cuando hagas tu elección, ¡no la cambies! Si ya
identaste con 4 espacios, sigue haciendo futuras identaciones con 4
espacios también, de otra forma, puedes encontrar problemas.

Guárdalo y ejecútalo de nuevo:

@example
$ python3 python_intro.py
It works!
@end example

Nota: Recuerda que en Windows, 'python3' no es reconocido como un
comando. Desde ahora, reemplaza 'python3' con 'python' para ejecutar
el archivo.

@section ¿Qué pasa si una condición no es verdadera?

En previos ejemplos, el código fue ejecutado solamente cuando las
condiciones eran Verdaderas. Pero Python también tiene sentencias elif
y else:

@example
if 5 > 2:
    print('5 is indeed greater than 2')
else:
    print('5 is not greater than 2')
@end example

Cuando ésto se ejecuta, imprimirá:

@example
$ python3 python_intro.py
5 is indeed greater than 2
@end example

Si 2 era mayor que el número 5, entonces el segundo comando sería
ejecutado. Veamos cómo elif funciona:

@example
name = 'Sonja'
if name == 'Ola':
    print('Hey Ola!')
elif name == 'Sonja':
    print('Hey Sonja!')
else:
    print('Hey anonymous!')
@end example

y ejecuta:

@example
$ python3 python_intro.py
Hey Sonja!
@end example

¿Ves qué sucedió allí? elif te deja añadir condiciones adicionales que
se ejecutan si las condiciones previas fallan.

Tú puedes añadir tantas sentencias elif como quieras, luego de tu
sentencia inicial if. Por ejemplo:

@example
volume = 57
if volume < 20:
    print("It's kinda quiet.")
elif 20 <= volume < 40:
    print("It's nice for background music")
elif 40 <= volume < 60:
    print("Perfect, I can hear all the details")
elif 60 <= volume < 80:
    print("Nice for parties")
elif 80 <= volume < 100:
    print("A bit loud!")
else:
    print("Me duelen las orejas! :(")
@end example

Python corre a través de cada prueba secuencialmente e imprime:

@example
$ python3 python_intro.py
Perfect, I can hear all the details
@end example

@section Comentarios

Los comentarios son líneas que comienzan con #. Tú puedes escribir lo
que quieras tras el # y Python lo ignorará. Los comentarios pueden
hacer que el código sea más fácil de entender para otras personas.

Veamos cómo luce:

@example
# Cambiar el volumen si esta muy alto o muy bajo
if volume < 20 or volume > 80:
    volume = 50
    print("Mucho mejor!")
@end example

Tú no necesitas escribir un comentario para cada línea de código, pero
ellos son útiles para explicar qué está haciendo el código, o proveer
un resumen cuando se está haciendo algo complejo.

@section Resumen

En los últimos ejercicios aprendiste acerca de:

@itemize @bullet
@item
Comparar cosas - en Python puedes comparar cosas haciendo uso de >, >=, ==, <=, < y de los operadores and y or
@item
Boolean - un tipo de objeto que sólo puede tener uno de dos valores: True o False
@item
Guardar archivos - almacenar código en archivos para que puedas ejecutar programas más grandes.
@item
if... elif... else - sentencias que te permiten ejecutar código sólo cuando se cumplen ciertas condiciones.
@item
comentarios - líneas que Python no ejecutará que permiten documentar el código
@end itemize

¡Es tiempo para leer la última parte de este capítulo!

@section ¡Tus propias funciones!

Para lectores en casa: este capítulo está cubierto en el vídeo
@url{https://www.youtube.com/watch?v=5owr-6suOl0, Bases de Python:
Funciones}

¿Recuerdas las funciones como len() que puedes ejecutar en Python?
Bien, buenas noticias - ¡aprenderás cómo escribir tus propias
funciones ahora!

Una función es una secuencia de instrucciones que Python debería
ejecutar. Cada función en Python inicia con la palabra clave def, el
nombre es dado, y puede tener algunos parámetros. Veamos. Reemplaza el
código en python_intro.py con lo siguiente:

@example
def hi():
    print('Hi there!')
    print('How are you?')

hi()
@end example

Okay, ¡nuestra primera función está lista!

Tú puedes preguntar por qué hemos escrito el nombre de la función en
la parte inferior del ejemplo. Esto es porque Python lee el archivo y
lo ejecuta de arriba a bajo. Así en orden para usar nuestra función,
tenemos que re-escribirlo en la parte inferior.

Ejecuta ésto ahora y mira qué sucede:

@example
$ python3 python_intro.py
Hi there!
How are you?
@end example

Nota: si ésto no funciona, ¡Tranquila! La salida te ayudará a entender
por qué:

@itemize @bullet
@item
Si te sale NameError, probablemente significa que escribiste algo mal,
así que deberias comprobar si utilizaste el mismo nombre para crear la
función con def hi(): y al llamarla con hi().

@item
Si te sale un IndentationError, comprueba que las líneas del print
tienen el mismo espacio en blanco al comienzo de línea: python
requiere que todo el código dentro de la función esté perfectamente
alineado.

@item
Si no hay ninguna salida, comprueba que el último hi() no esté
identado - si lo está, esa línea también será parte de la función, y
nunca se ejecutará.

@end itemize

Construyamos nuestra primera función con parámetros. Cambiaremos el
ejemplo anterior - una función que dice 'hola' para la persona que lo
ejecuta - con un nombre:

@example
def hi(name):
@end example

Como puedes ver, ahora le dimos a nuestra función un parámetro que
llamamos nombre:

@example
def hi(name):
    if name == 'Ola':
        print('Hi Ola!')
    elif name == 'Sonja':
        print('Hi Sonja!')
    else:
        print('Hi anonymous!')

hi()
@end example

Recuerda: La función print está indentada con 4 espacios en la
sentencia if. Esto es porque la función se ejecuta cuando la condición
es conocida. Veamos cómo funciona ahora:

@example
$ python3 python_intro.py
Traceback (most recent call last):
File "python_intro.py", line 10, in <module>
  hi()
TypeError: hi() missing 1 required positional argument: 'name'
@end example

Oops, un error. Por suerte, Python nos da un útil y agradable mensaje
de error. Este nos dice que la función hi() (que definimos) tiene un
argumento requerido (llamado nombre) y que olvidamos pasarlo cuando
llamamos a la función. Configuremos esto en la parte inferior del
archivo:

@example
hi("Ola")
@end example

Y ejecutemos otra vez:

@example
$ python3 python_intro.py
Hi Ola!
@end example

¿Y si cambiamos el nombre?

@example
hi("Sonja")
@end example

Y lo ejecutamos:

@example
$ python3 python_intro.py
Hi Sonja!
@end example

Ahora, ¿qué piensas que sucederá si escribes otro nombre allí? (No Ola
o Sonja.) Inténtalo y comprueba si estás en lo correcto. Debería
imprimir esto:

@example
Hi anonymous!
@end example

Esto es sorprendente, ¿Verdad? De esta manera tú no tienes que repetir
la función cada vez que cambies el nombre de la persona que está
supuesta a recibir. Y eso es exactamente por qué necesitamos funciones
- ¡tú nunca quieres repetir tú código!

Hacer algo más inteligente - hay más nombres que dos, y escribir una
condición para cada uno sería difícil, ¿Verdad? Reemplaza el contenido
de tu archivo con lo siguiente:

@example
def hi(name):
    print('Hi ' + name + '!')

hi("Rachel")
@end example

Llamaremos al código ahora:

@example
$ python3 python_intro.py
Hi Rachel!
@end example

¡Felicidades! ¡Ya aprendíste cómo escribir funciones! :)

@section Bucles

Para lectores en casa: este capítulo está cubierto en el vídeo
@url{https://www.youtube.com/watch?v=aEA6Rc86HF0, Python Basics: For
Loop}

Listo esta es la última parte. Eso fue rápido, ¿verdad? :)

Los programadores no les gusta repetir. Programar es todo acerca de
automatizar cosas, así que no queremos recibir a cada persona por su
nombre manualmente, ¿verdad? Allí es dónde los ciclos vienen a
manejarse.

¿Aún recuerdas las listas? Hagamos una lista de niñas:

@example
girls = ['Rachel', 'Monica', 'Phoebe', 'Ola', 'You']
@end example

Queremos recibir a todos ellos con sus nombres. Tenemos la función
hola para hacerlo, así que usémosla en un ciclo:

@example
for name in girls:
@end example

La sentencia for se comporta parecido a una sentencia if; ambos
códigos necesitan ser indentados por 4 espacios.

Aquí está completo el código que estará en el archivo:

@example
def hi(name):
    print('Hi ' + name + '!')

girls = ['Rachel', 'Monica', 'Phoebe', 'Ola', 'You']
for name in girls:
    hi(name)
    print('Next girl')
@end example

Y cuando lo ejecutemos:

@example
$ python3 python_intro.py
Hi Rachel!
Next girl
Hi Monica!
Next girl
Hi Phoebe!
Next girl
Hi Ola!
Next girl
Hi You!
Next girl
@end example

Como puedes ver, todo lo que coloques dentro de una sentencia for con
una indentación, será repetida para cada elemento de la lista girls.

Tu puedes también usar for con números usando la función range:

@example
for i in range(1, 6):
    print(i)
@end example

El cuál imprimirá:

@example
1
2
3
4
5
@end example

range es una función que crea una lista de números en serie (estos
números son proporcionados por ti como parámetros).

Nota que el segundo de estos números no está incluido en la lista que
regresa Python (es decir, range(1, 6) cuenta desde 1 a 5, pero no
incluye el número 6). Esto es porque "range" está medio-abierto, y por
eso se incluye el primer valor, pero no el último.

@section Resumen

Eso es todo. ¡Tú rockeas totalmente! Esto fue un capítulo difícil, así
que deberías sentirte orgullos@ de ti. ¡Estamos definitivamente
encantados de que hayas llegado tan lejos!

Para un tutorial oficial y completo de python visita
@url{https://docs.python.org/3/tutorial/}. Este te dará un estudio completo
de éste lenguaje. Gracias :)

Tu podrías querer un momento para algo - estirarte, caminar cerca,
descansar tus ojos - antes de avanzar a un próximo capítulo. :)

@image{images/cupcake,6in,,Cupcake}

@node ¿Qué es Django?
@chapter ¿Qué es Django?
@cindex ¿Qué es Django?

Django (gdh/ˈdʒæŋɡoʊ/jang-goh) es un framework de aplicaciones web
gratuito y de código abierto (open source) escrito en Python. Un
framework web es un conjunto de componentes que te ayudan a
desarrollar sitios web más fácil y rápidamente.

Cuando construyes un sitio web, siempre necesitas un conjunto de
componentes similares: una manera de manejar la autenticación de
usuarios (registrarse, iniciar sesión, cerrar sesión), un panel de
administración para tu sitio web, formularios, una forma de subir
archivos, etc.

Por suerte para nosotros, hace tiempo que otros desarrolladores se
dieron cuenta de que siempre se enfrentaban a los mismos problemas
cuando construían sitios web, y por eso se unieron y crearon
frameworks (Django es uno de ellos) con componentes listos para
usarse.

Los frameworks sirven para que no tengamos que reinventar la rueda
cada vez y que podamos avanzar más rápido al construir un nuevo sitio.

@section ¿Por qué necesitas un framework?

Para entender para qué sirve realmente Django, necesitamos fijarnos en
cómo funcionan los servidores. Lo primero es que el servidor necesita
enterarse de que tú quieres que te sirva una página web.

Imagina un buzón (puerto) en el que alguien está constantemente
mirando si hay cartas entrantes (peticiones). Esto es lo que hace un
servidor web. El servidor web lee la carta, y envía una respuesta con
la página web. Pero para enviar algo, tenemos que tener algún
contenido. Y Django nos ayuda a crear ese contenido.

@section ¿Qué sucede cuando alguien solicita una página web de tu servidor?

Cuando llega una petición a un servidor web, esta es pasada a Django,
quien intenta averiguar qué es lo realmente solicitado. Toma primero
una dirección de página web e intenta averiguar qué hacer con
ella. Esta parte es realizada por el urlresolver de Django (ten en
cuenta que la dirección de un sitio web es llamada URL - Uniform
Resource Locator; así que el nombre urlresolver tiene sentido). Este
no es muy inteligente - toma una lista de patrones y trata de hacer
coincidir la URL. Django comprueba los patrones de arriba hacia abajo
y si algo coincide entonces Django le pasa la solicitud a la función
asociada (que se llama view (vista)).

Imagina a un cartero llevando una carta. Él está caminando por la
calle y comprueba cada número de casa con el que está en la carta. Si
coincide, deja la carta allí. Así es como funciona el urlresolver!

En la función de view (vista) se hacen todas las cosas interesantes:
podemos mirar a una base de datos para buscar alguna información. ¿Tal
vez el usuario pidió cambiar algo en los datos? Como una carta
diciendo "Por favor cambia la descripción de mi trabajo." La vista
puede comprobar si tienes permiso para hacerlo, actualizar la
descripción de tu trabajo y devolver un mensaje: "¡Hecho!". Luego la
vista genera una respuesta y Django puede enviarla al navegador del
usuario.

Esta descripción es un poco simplista, pero de momento no necesitas
saber todos los detalles técnicos, con tener una idea general es más
que suficiente.

Así que en lugar de detenernos demasiado en los detalles, vamos a
empezar a crear algo con Django y ¡así aprenderemos las cosas
importantes sobre la marcha!


@node Instalacion de Django
@chapter Instalacion de Django
@cindex Instalacion de Django


Nota Si usas un Chromebook, omite este capítulo y asegúrate de seguir
las instrucciones de Chromebook Setup.

Nota Si ya has realizado los pasos de instalación, esto ya lo has
hecho. ¡Puedes avanzar directamente al siguiente capítulo!

Parte de esta sección está basada en tutoriales por Geek Girls Carrots
(@url{https://github.com/ggcarrots/django-carrots}).

Parte de este capítulo está basada en el
@url{http://django-marcador.keimlink.de/, django-marcador} tutorial
bajo la licencia Creative Commons Attribution-ShareAlike 4.0
internacional. El tutorial de django-marcador tiene derechos de autor
de Markus Zapke-Gündemann et al.

@section Entorno virtual

Antes de instalar Django, instalaremos una herramienta extremadamente
útil que ayudará a mantener tu entorno de desarrollo ordenado en tu
computadora. Es posible saltarse este paso, pero es altamente
recomendable. ¡Empezar con la mejor configuración posible te ahorrará
muchos problemas en el futuro!

Así que, vamos a crear un entorno virtual (también llamado un
virtualenv). Virtualenv aísla tu configuración de Python/Django para
cada proyecto. Esto quiere decir que cualquier cambio que hagas en un
sitio web no afectará a ningún otro que estés desarrollando. Genial,
¿no?

Todo lo que necesitas hacer es encontrar un directorio en el que
quieras crear el virtualenv; tu directorio home, por ejemplo. En
Windows, puede verse como C:\Users\Name (donde Name es el nombre de tu
usuario).

NOTA: En Windows, asegúrate de que este directorio no contiene
caracteres especiales o acentuados; si tu nombre de usuario contiene
caracteres acentuados, usa un directorio distinto, por ejemplo
C:\djangogirls.

Para este tutorial usaremos un nuevo directorio djangogirls en tu
directorio home:

@example
$ mkdir djangogirls
$ cd djangogirls
@end example

Haremos un virtualenv llamado myvenv. El comando general estará en el
formato:

@example
$ python3 -m venv myvenv
@end example

@subsection Entorno Virtual de Windows

Para crear un nuevo virtualenv, necesitas abrir una terminal "command prompt" y ejecutar python -m venv myvenv. Se verá así:

@example
C:\Users\Name\djangogirls> python -m venv myvenv
@end example

Donde myvenv es el nombre de tu virtualenv. Puedes utilizar cualquier otro nombre, pero asegúrate de usar minúsculas y no usar espacios, acentos o caracteres especiales. También es una buena idea mantener el nombre corto. ¡Vas utilizarlo muchas vecesl!

@subsection Entorno Virtual de Linux y OS X

Podemos crear un virtualenv en Linux y OS X, es tan sencillo como
ejecutar python3 -m venv myvenv. Se verá así:

@example
$ python3 -m venv myvenv
@end example

myvenv es el nombre de tu virtualenv. Puedes usar cualquier otro
nombre, pero sólo utiliza minúsculas y no incluyas espacios. También
es una buena idea mantener el nombre corto. ¡Vas a referirte muchas
veces a él!

NOTA: En algunas versiones de Debian/Ubuntu, puede que obtengas el
siguiente error:

@example
The virtual environment was not created successfully because ensurepip is not available.  En sistemas Debian/Ubuntu, tendrás que instalar el paquete python3-venv usando el siguiente comando.
   apt-get install python3-venv
Puede que tengas que usar sudo con este comando.  Después de instalar el paquete python3-venv, vuelve a crear tu entorno virtual.
@end example

En este caso, sigue las instrucciones anteriores e instala el paquete
python3-venv:

@example
$ sudo apt install python3-venv
@end example

NOTA: En algunas versiones de Debian/Ubuntu inicializar el entorno
virtual de esta manera da el siguiente error:

@example
Error: Command '['/home/eddie/Slask/tmp/venv/bin/python3', '-Im', 'ensurepip', '--upgrade', '--default-pip']' returned non-zero exit status 1
@end example

Para evitar esto, utiliza directamente el comando virtualenv.

@example
$ sudo apt-get install python-virtualenv
$ virtualenv --python=python3.6 myvenv
@end example

NOTA: Si obtienes un error como

@example
E: Unable to locate package python3-venv
@end example

entonces ejecuta:

@example
sudo apt install python3.6-venv
@end example

@section Trabajar con virtualenv

El comando anterior creará un directorio llamado myvenv (o cualquier
nombre que hayas elegido) que contiene nuestro entorno virtual
(básicamente un montón de archivos y carpetas).

@subsection Trabajando con virtualenv: Windows

Inicia el entorno virtual ejecutando:

@example
C:\Users\Name\djangogirls> myvenv\Scripts\activate
@end example

Nota: en 10 de Windows puedes obtener un error en Windows PowerShell
que dice execution of scripts is disabled on this system. En este
caso, abre otro Windows PowerShell con la opción "Ejecutar como
administrador". Luego intenta escribir el siguiente comando antes de
inicializar tu entorno virtual:

@example
C:\WINDOWS\system32 > Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
   Execution Policy Change
   The execution policy helps protect you from scripts that you do not trust. Changing the execution policy might expose you to the security risks described in the about_Execution_Policies help topic at http://go.microsoft.com/fwlink/?LinkID=135170. Do you want to change the execution policy? [Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is "N"): A
@end example

NOTA: Para usuarios del popular editor VS Code, el cual viene con una
terminal integrada basada en el poweshell de windows; si deseas añadir
la terminal integrada, puedes arrancar el siguiente comando para
activar tu entorno virtual:

@example
$ . myvenv\Scripts\activate.ps1
@end example

La ventaja es que no tienes que cambiar las ventanas entre el editor
de código y la línea de comandos.

@subsection Trabajando con virtualenv: Linux y OS X

Inicia el entorno virtual ejecutando:

@example
$ source myvenv/bin/activate
@end example

¡Recuerda reemplazar myvenv con tu nombre de virtualenv que hayas elegido!

NOTA: a veces source podría no estar disponible. En ese caso trata hacerlo de esta forma:

@example
$ . myvenv/bin/activate
@end example

Sabrás que tienes virtualenv iniciado cuando veas que la línea de
comando en tu consola tiene el prefijo (myvenv).

Cuando trabajes en un entorno virtual, python automáticamente se
referirá a la versión correcta, de modo que puedes utilizar python en
vez de python3.

Ok, tenemos todas las dependencias importantes en su
lugar. ¡Finalmente podemos instalar Django!

@section Instalar Django

Ahora que tienes tu virtualenv iniciado, puedes instalar Django.

Antes de hacer eso, debemos asegurarnos que tenemos la última versión
de pip, el software que utilizamos para instalar Django:

@example
(myvenv) ~$ python -m pip install --upgrade pip
@end example

El comando para instalar django con pip sería:

@example
(myvenv) ~$ python -m pip install Django
@end example


@section Instalar paquetes con un fichero de requisitos (requirements)

Un fichero de requisitos (requirements) tiene una lista de
dependencias que se deben instalar mediante

@example
pip install :
@end example

Primero crea un archivo requirements.txt dentro de tu directorio
djangogirls, usando el editor de código que instalaste previamente. Lo
puedes hacer mediante abriendo un nuevo archivo en el editor de código
y guardándolo como requirements.txt en el directorio djangogirls. Tu
directorio se verá así:

@example
djangogirls
└───requirements.txt
@end example

Dentro del fichero djangogirls/requirements.txt deberías tener el
siguiente texto:

@example
Django~=2.2.4
@end example

Ahora, ejecuta pip install -r requirements.txt para instalar Django.

@example
(myvenv) ~$ pip install -r requirements.txt
Collecting Django~=2.2.4 (from -r requirements.txt (line 1))
  Downloading Django-2.2.4-py3-none-any.whl (7.1MB)
Installing collected packages: Django
Successfully installed Django-2.2.4
@end example

@subsection Instalando Django: Windows

Si obtienes un error cuando llamas al pip en la plataforma de Windows,
por favor verifica si el nombre de ruta de tu proyecto contiene
espacios, acentos o caracteres especiales (por ejemplo,
C:\Usuarios\NombreUsuario\djangogirls). Si los tiene, utiliza otro en
su lugar sin espacios, acentos o caracteres especiales (sugerencia:
C:\djangogirls). Crea un nuevo virtualenv en el nuevo directorio,
luego borra el viejo y trata de escribir el comando anterior otra
vez. (Moviendo el directorio virtualenv no funcionará debido a que usa
rutas absolutas.)

@subsection Instalando Django: Windows 8 y Windows 10

Tu línea de comando puede congelarse luego de intentar instalar
Django. Si esto sucede, usa el siguiente comando:

@example
C:\Users\Name\djangogirls> python -m pip install -r requirements.txt
@end example

@subsection Instalando Django: Linux

Si obtienes un error cuando llamas pip en Ubuntu 12.04, por favor
corre python -m pip install -U --force-reinstall pip para reparar la
instalación de pip en el virtualenv.

¡Eso es todo! Ahora estás lista (por fin) para crear una aplicación Django!

@section ¡Tu primer proyecto en Django!

Parte de este capítulo se basa en tutoriales por
@url{https://github.com/ggcarrots/django-carrots, Geek Girls Carrots}.

Parte de este capítulo está basado en el
@url{http://django-marcador.keimlink.de/, tutorial django-marcador}
bajo licencia de Creative Commons Attribution-ShareAlike 4.0
internacional. El tutorial de django-marcador tiene derechos de autor
de Markus Zapke-Gündemann et al.

¡Vamos a crear un blog sencillo!

El primer paso es iniciar un nuevo proyecto de Django. Básicamente,
significa que vamos a lanzar unos scripts proporcionados por Django
que nos crearán el esqueleto de un proyecto de Django. Son solo un
montón de directorios y archivos que usaremos más tarde.

Los nombres de algunos archivos y directorios son muy importantes para
Django. No deberías renombrar los archivos que estamos a punto de
crear. Moverlos a un lugar diferente tampoco es buena idea. Django
necesita mantener una cierta estructura para poder encontrar cosas
importantes.

Recuerda ejecutar todo en el virtualenv. Si no ves un prefijo (myvenv)
en tu consola tienes que activar tu virtualenv. Explicamos cómo
hacerlo en el capítulo de Instalación de Django en la sección Trabajar
con virtualenv. Basta con escribir myvenv\Scripts\activate en Windows
o source myvenv/bin/activate en Mac OS / Linux.

@subsection Crear proyecto: OS X o Linux

En MacOS o Linux deberías ejecutar el siguiente comando en la
consola. no te olvides de añadir el punto . al final

@example
(myvenv) ~/djangogirls$ django-admin startproject mysite .
@end example

El punto . es crucial porque le dice al script que instale Django en
el directorio actual (para el cual el punto . sirve de abreviatura).

Nota Cuando escribas los comandos de arriba acuérdate de que sólo
tienes que escribir la parte que empieza por django-admin. La parte de
(myvenv) ~/djangogirls$ que mostramos aquí es sólo un ejemplo del
mensaje que aparecerá en tu línea de comandos.

@subsection Crear proyecto: Windows

En Windows debes ejecutar el siguiente comando. (No olvides incluir el
punto . al final):

@example
(myvenv) C:\Users\Name\djangogirls> django-admin.exe startproject mysite .
@end example

El punto . es crucial porque le dice al script que instale Django en
el directorio actual (para el cual el punto . sirve de abreviatura).

Nota Cuando teclees los comandos de arriba, recuerda que sólo tienes
que escribir la parte que empieza por django-admin.exe. La parte de
(myvenv) C:\Users\Name\djangogirls> que mostramos aquí es sólo un
ejemplo del mensaje que aparecerá en tu línea de comandos.

django-admin.py es un script que creará los archivos y directorios
para ti. Ahora deberías tener una estructura de directorios parecida a
esta:

@example
djangogirls
├───manage.py
├───mysite
│        settings.py
│        urls.py
│        wsgi.py
│        __init__.py
└───requirements.txt
@end example

Nota: en tu estructura de directorios, también verás el directorio
venv que creamos anteriormente.

manage.py es un script que ayuda con la administración del sitio. Con
él podremos iniciar un servidor web en nuestro ordenador sin necesidad
de instalar nada más, entre otras cosas.

El archivo settings.py contiene la configuración de tu sitio web.

Recuerdas cuando hablamos de una cartera que debía comprobar dónde
entregar una carta? El archivo urls.py contiene una lista de los
patrones utilizados por urlresolver.

Por ahora vamos a ignorar el resto de archivos porque no los vamos a
cambiar. ¡Sólo acuérdate de no borrarlos accidentalmente!

@section Cambiar la configuración

Vamos a hacer algunos cambios en mysite/settings.py. Abre el archivo
usando el editor de código que has instalado anteriormente.

Nota: Ten en cuenta que settings.py es un archivo normal, como
cualquier otro. Puedes abrirlo con el editor de texto, usando "file ->
open" en el menu de acciones. Esto te debería llevar a la típica
ventana donde puedes buscar el archivo settings.py y
seleccionarlo. Como alternativa, puedes abrir el archivo haciendo
click derecho en la carpeta djangogirls en tu escritorio. Luego,
selecciona tu editor de texto en la lista. Elegir el editor es
importante puesto que puede que tengas otros programas que pueden
abrir el archivo pero que no te dejaran editarlo.

Sería bueno tener el horario correcto en nuestro sitio web. Ve a lista
de Wikipedia de las zonas horarias y copia tu zona horaria (TZ)
(e.g. Europa/Berlín).

En settings.py, encuentra la línea que contiene TIME_ZONE y modifícala
para elegir tu zona horaria. Por ejemplo:

@example
TIME_ZONE = 'Europe/Berlin'
@end example

Un código de idioma tiene dos partes: el idioma, p.ej. en para inglés
o de para alemán, y el código de país, p.ej. de para Alemania o ch
para Suiza. Si tu idioma nativo no es el inglés, puedes añadir lo
siguiente para cambiar el idioma de los botones y notificaciones de
Django. Así tendrás el botón "Cancel" traducido al idioma que pongas
aquí. @url{https://docs.djangoproject.com/en/2.2/ref/settings/#language-code,
Django viene con muchas traducciones preparadas}

Si quieres un idioma diferente, cambia el código de idioma cambiando
la siguiente línea:

@example
LANGUAGE_CODE = 'es-es'
@end example

También tenemos que añadir una ruta para archivos estáticos. (Veremos
todo acerca de archivos estáticos y CSS más adelante.) Ve al final del
archivo, y justo debajo de la entrada STATIC_URL, añade una nueva
llamada STATIC_ROOT:

@example
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
@end example

Cuando DEBUG es True y ALLOWED_HOST esta vacío, el host es validado
contra ['localhost', '127,0.0.1', '[::1]']. Una vez despleguemos
nuestra aplicación este no sera el mismo que nuestro nombre de host en
PythonAnywhere así que cambiaremos la siguiente opción:

@example
ALLOWED_HOSTS = ['127.0.0.1', '.pythonanywhere.com']
@end example

Nota: si estas usando un Chromebook, añade esta linea al final del
archivo settings.py: MESSAGE_STORAGE =
'django.contrib.messages.storage.session.SessionStorage'

Añade también .c9users.io a ALLOWED_HOSTS si estás usando cloud9.

@section Configurar una base de datos

Hay una gran variedad de opciones de bases de datos para almacenar los
datos de tu sitio. Utilizaremos la que viene por defecto, sqlite3.

Esta ya está configurado en esta parte de tu archivo
mysite/settings.py:

@example
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
@end example

Para crear una base de datos para nuestro blog, ejecutemos lo
siguiente en la consola: python manage.py migrate (necesitamos estar
en el directorio de djangogirls que contiene el archivo manage.py). Si
eso va bien, deberías ver algo así:

@example
(myvenv) ~/djangogirls$ python manage.py migrate
Operations to perform:
  Apply all migrations: auth, admin, contenttypes, sessions
Running migrations:
  Rendering model states... DONE
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying sessions.0001_initial... OK
@end example

Y, ¡terminamos! ¡Es hora de iniciar el servidor web y ver si está
funcionando nuestro sitio web!

@section Iniciar el servidor

Debes estar en el directorio que contiene el archivo manage.py (en la
carpeta djangogirls). En la consola, podemos iniciar el servidor web
ejecutando python manage.py runserver:

@example
(myvenv) ~/djangogirls$ python manage.py runserver
@end example

Si estas usando un Chromebook, utiliza este comando:

@example
(myvenv) ~/djangogirls$ python manage.py runserver 0.0.0.0:8080
@end example

Si estás en Windows y te falla con un error UnicodeDecodeError,
utiliza en su lugar este comando:

@example
(myvenv) ~/djangogirls$ python manage.py runserver 0:8000
@end example

Ahora necesitas revisar que tu website se está ejecutando. Abre tu
navegador (Firefox, Chrome, Safari, Internet Explorer, o cualquiera
que uses) y escribe esta dirección:

@example
http://127.0.0.1:8000/
@end example

Si estás usando una Chromebook y Cloud9, haga clic en la URL de la
ventana emergente que debería haber aparecido en la esquina superior
derecha de la ventana de comandos donde se está ejecutando el servidor
web. La URL se verá parecida a:

@example
https://<a bunch of letters and numbers>.vfs.cloud9.us-west-2.amazonaws.com
@end example

¡Enhorabuena! ¡Has creado tu primer sitio web y lo has iniciado usando
un servidor web! ¿No es genial?

@image{images/install_worked,6in,,Install Works!}

Tenga en cuenta que una ventana de comandos sólo puede ejecutar una
cosa a la vez, y la ventana de comandos que abrió antes está
ejecutando el servidor web. Mientras el servidor web esté corriendo y
esperando solicitudes adicionales, la terminal aceptará nuevo texto
pero no ejecutará nuevos comandos.

Miramos cómo funcionan los servidores web en el capítulo Cómo funciona
internet.

Para escribir comandos adicionales mientras el servidor web está
corriendo, abra una nueva ventana de terminal y active su virtualenv
-- para revisar las instrucciones sobre cómo abrir una segunda ventana
de terminal, vea
@url{https://tutorial.djangogirls.org/es/intro_to_command_line/,
Introducción a la línea de comandos}. Para parar el servidor web, ve a
la ventana donde se esté ejecutando y pulsa CTRL+C, las teclas Control
y C a la vez ( en Windows puede que tengas que pulsar Ctrl+Break).

¿Preparada para el próximo paso? ¡Es momento de crear algo de
contenido!

@section Modelos en Django

Lo que queremos crear ahora es algo que almacene todas las entradas de
nuestro blog. Pero para poder hacerlo tenemos que hablar un poco sobre
algo llamado objetos.

@subsection Objetos

Hay un concepto en el mundo de la programación llamado programación
orientada a objetos. La idea es que en lugar de escribir todo como una
aburrida secuencia de instrucciones de programación podemos modelar
cosas y definir cómo interactúan entre ellas.

Entonces, ¿qué es un objeto? Es un conjunto de propiedades y
acciones. Suena raro, pero te daremos un ejemplo.

Si queremos modelar un gato crearemos un objeto Gato que tiene algunas
propiedades como: color, edad, temperamento (como bueno, malo, o
dormilón ;)), y dueño (este es un objeto Persona o en caso de un gato
callejero, esta propiedad está vacía).

Luego, el Gato tiene algunas acciones como: ronronear, arañar o
alimentar (en cuyo caso daremos al gato algo de ComidaDeGato, el cual
debería ser un objeto aparte con propiedades como sabor).

@example
Gato
---------
color
edad
humor
dueño
ronronear()
rasguñar()
alimentarse(comida_de_gato)

ComidaDeGato
--------
sabor
@end example

Básicamente se trata de describir cosas reales en el código con
propiedades (llamadas propiedades del objeto) y las acciones (llamadas
métodos).

Y ahora, ¿cómo modelamos las entradas en el blog? Queremos construir
un blog, ¿no?

Necesitamos responder a la pregunta: ¿Qué es una entrada de un blog?
¿Qué propiedades debería tener?

Bueno, seguro que nuestras entradas de blog necesitan un texto con su
contenido y un título, ¿cierto? También sería bueno saber quién lo
escribió, así que necesitamos un autor. Por último, queremos saber
cuándo se creó y publicó la entrada.

@example
Post
--------
title
text
author
created_date
published_date
@end example

¿Qué tipo de cosas podría hacerse con una entrada del blog? Sería
bueno tener algún método que publique la entrada, ¿no?

Así que vamos a necesitar el método publicar.

Puesto que ya sabemos lo que queremos lograr, ¡podemos empezar a
modelarlo en Django!

@section Modelos en Django

Sabiendo qué es un objeto, podemos crear un modelo en Django para
nuestros entradas de blog.

Un modelo en Django es un tipo especial de objeto que se guarda en la
base de datos. Una base de datos es una colección de datos. Es un
lugar en el cual almacenarás la información sobre usuarios, tus
entradas de blog, etc. Utilizaremos una base de datos SQLite para
almacenar nuestros datos. Este es el adaptador de base de datos
predeterminado en Django -- será suficiente para nosotros por ahora.

Puedes pensar el modelo en la base de datos, como una hoja de cálculo
con columnas (campos) y filas (datos).

@section Crear una aplicación

Para mantener todo en orden, crearemos una aplicación separada dentro
de nuestro proyecto. Es muy bueno tener todo organizado desde el
principio. Para crear una aplicación, necesitamos ejecutar el
siguiente comando en la consola (dentro de la carpeta de djangogirls
donde está el archivo manage.py):

@example
(myvenv) ~/djangogirls$ python manage.py startapp blog
@end example

@example
(myvenv) C:\Users\Name\djangogirls> python manage.py startapp blog
@end example

Notarás que se ha creado un nuevo directorio blog y ahora contiene una
cantidad de archivos. Los directorios y archivos en nuestro proyecto
deberían verse así:

@example
djangogirls
├── blog
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── db.sqlite3
├── manage.py
├── mysite
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
└── requirements.txt
@end example

Después de crear una aplicación, también necesitamos decirle a Django
que debe utilizarla. Eso se hace en el fichero mysite/settings.py --
ábrelo en el editor. Tenemos que encontrar INSTALLED_APPS y agregar
una línea que contiene 'blog.apps.BlogConfig', justo por encima de
]. El producto final debe tener este aspecto:

@example
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog.apps.BlogConfig',
]
@end example

@section Crear el modelo del Post

En el archivo blog/models.py definimos todos los objetos llamados
Models. Este es un lugar en el cual definiremos nuestra entrada del
blog.

Abre blog/models.py en el editor, borra todo, y escribe código como
este:

@example
from django.db import models
from django.utils import timezone


class Post(models.Model):
    author = models.ForeignKey('auth.User', on_delete=models.CASCADE)
    title = models.CharField(max_length=200)
    text = models.TextField()
    created_date = models.DateTimeField(
            default=timezone.now)
    published_date = models.DateTimeField(
            blank=True, null=True)

    def publish(self):
        self.published_date = timezone.now()
        self.save()

    def __str__(self):
        return self.title
@end example

Comprueba nuevamente que usas dos guiones bajos (_) en cada lado de
str. Esta convención se usa en Python con mucha frecuencia y a veces
también se llaman "dunder" (abreviatura de "double-underscore" o, en
español, "doble guión bajo").

Da un poco de miedo, ¿no? Pero no te preocupes, ¡vamos a explicar qué
significan estas líneas!

Todas las líneas que comienzan con from o import son líneas para
agregar algo de otros archivos. Así que en vez de copiar y pegar las
mismas cosas en cada archivo, podemos incluir algunas partes con
from... import ....

class Post(models.Model):, esta línea define nuestro modelo (es un
objeto).

@itemize @bullet
@item
class es una palabra clave que indica que estamos definiendo un objeto.

@item
Post es el nombre de nuestro modelo. Podemos darle un nombre diferente
(pero debemos evitar espacios en blanco y caracteres
especiales). Siempre inicia el nombre de una clase con una letra
mayúscula.

@item
models.Model significa que Post es un modelo de Django, así Django
sabe que debe guardarlo en la base de datos.

@end itemize

Ahora definimos las propiedades de las que hablábamos: title, text,
created_date, published_date y author. Para ello tenemos que definir
el tipo de cada campo (¿es texto? ¿un número? ¿una fecha? ¿una
relación con otro objeto como un User (usuario)?)

@itemize @bullet
@item
models.CharField, así es como defines un texto con un número limitado de caracteres.

@item
models.TextField, este es para texto largo sin límite. Suena perfecto
para el contenido de la entrada del blog, ¿no?

@item
models.DateTimeField, este es fecha y hora.

@item
modelos.ForeignKey, este es una relación (link) con otro modelo.

@end itemize

No vamos a explicar aquí cada pedacito de código porque nos tomaría
demasiado tiempo. Deberías echar un vistazo a la documentación de
Django si deseas obtener más información sobre los campos Modelo y
cómo definir otras cosas distintas a las descritas anteriormente
(@url{https://docs.djangoproject.com/en/2.2/ref/models/fields/#field-types}).

¿Y qué sobre def publish(self):? Es exactamente el método publish que
mencionábamos antes. def significa que es una función/método y publish
es el nombre del método. Puedes cambiar el nombre del método, si
quieres. La regla de nomenclatura es utilizar minúsculas y guiones
bajos en lugar de espacios. Por ejemplo, un método que calcule el
precio medio se podría llamar calcular_precio_medio.

Los métodos suelen devolver (return, en inglés) algo. Hay un ejemplo
de esto en el método __str__. En este escenario, cuando llamemos a
__str__() obtendremos un texto (string) con un título de Post.

También, nota que ambos def publish(self):, y def __str__(self): son
indentados dentro de nuestra clase. Porque Python es sensible a los
espacios en blancos, necesitamos indentar nuestros métodos dentro de
la clase. De lo contrario, los métodos no pertenecen a la clase, y
puedes obtener un comportamiento inesperado.

Si algo todavía no está claro sobre modelos, ¡no dudes en preguntar a
tu guía! Sabemos que es complicado, sobre todo cuando aprendes lo que
son funciones y objetos al mismo tiempo. Pero con suerte, ¡todo tiene
un poco más de sentido para ti ahora!

@section Crear tablas para los modelos en tu base de datos

El último paso aquí es agregar nuestro nuevo modelo a la base de
datos. Primero tenemos que hacer saber a Django que hemos hecho
cambios en nuestro modelo. (Lo acabamos de crear!) Ve a tu terminal y
escribe python manage.py makemigrations blog. Se verá así:

@example
(myvenv) ~/djangogirls$ python manage.py makemigrations blog
Migrations for 'blog':
  blog/migrations/0001_initial.py:

  - Create model Post
@end example

Nota: Recuerda guardar los archivos que edites. De otro modo, tu
computador ejecutará las versiones anteriores lo que puede ocasionar
errores inesperados.

Django preparó un archivo de migración que ahora tenemos que aplicar a
nuestra base de datos. Escribe python manage.py migrate blog y el
resultado debería ser:

@example
(myvenv) ~/djangogirls$ python manage.py migrate blog
Operations to perform:
  Apply all migrations: blog
Running migrations:
  Applying blog.0001_initial... OK
@end example

¡Hurra! ¡Nuestro modelo Post ya está en nuestra base de datos! Estaría
bien verlo, ¿no? ¡Salta al siguiente capítulo para ver qué aspecto
tiene tu Post!

@node Administrador de Django
@chapter Administrador de Django
@cindex Administrador de Django

Para agregar, editar y borrar los posts que hemos modelado, usaremos
el administrador (admin) de Django.

Abre el fichero blog/admin.py en el editor y reemplaza su contenido
con esto:

@example
from django.contrib import admin
from .models import Post

admin.site.register(Post)
@end example

Como puedes ver, importamos (incluimos) el modelo Post definido en el
capítulo anterior. Para hacer nuestro modelo visible en la página del
administrador, tenemos que registrar el modelo con
admin.site.register(Post).

Ok, es hora de ver nuestro modelo Post. Recuerda ejecutar python
manage.py runserver en la consola para correr el servidor web. Ve a tu
navegador y escribe la dirección http://127.0.0.1:8000/admin/. Verás
una página de inicio de sesión como esta:

@image{images/login_page2,6in,,Django Administration Login}

Para iniciar sesión, deberás crear un superusuario (superuser), que es
un usuario que tiene control sobre todo el sitio. Vuelve a la línea de
comandos, escribe python manage.py createsuperuser y pulsa enter.

Recuerda, para escribir comandos mientras el servidor web está
funcionando, abre una nueva terminal y activa el virtualenv. Revisamos
cómo escribir nuevos comandos en el capítulo Tu primer proyecto de
Django!, al inicio de la sección Iniciando el servidor web.

En Mac OS X o Linux: 

@example
(myvenv) ~/djangogirls$ python manage.py createsuperuser
@end example

En Windows:

@example
(myvenv) C:\Users\Name\djangogirls> python manage.py createsuperuser
@end example

Cuando te lo pida, escribe tu nombre de usuario (en minúscula, sin
espacios), email y contraseña. No te preocupes si no puedes ver la
contraseña que estás tecleando - así es como debe ser. Tecléalo y
pulsa intro para continuar. Luego, verás algo así (donde username y
email serán los que escribiste anteriormente):

@example
Username: ola
Email address: ola@@example.com
Password:
Password (again):
Superuser created successfully.
@end example

Vuelve a tu navegador. Entra con las credenciales de super usuario que
escogiste; verás el panel de administrador de Django.

@image{images/django_admin3,6in,,Django Administration}

Ve a 'Posts' y curiosea un poco. Añade cinco o seis publicaciones en
tu blog. No te preocupes por el contenido -- solo será visible para ti
en tu ordenador -- puedes copiar y pegar texto de este tutorial para
ir más rápido. :)

Asegúrate de que al menos dos o tres posts (pero no todos) tengan la
fecha de publicación definida. Esto será muy poderoso después.

@image{images/edit_post3,6in,,Django Administration}

Si desea saber más sobre el administrador de Django, debe consultar la
documentación de Django:
@url{https://docs.djangoproject.com/en/2.2/ref/contrib/admin/}

Este posiblemente sea un buen momento para tomar un café (o té) o algo
para comer y reenergizar tu cuerpo. Has creado tu primer modelo en
Django - ¡Mereces un pequeño descanso!

@node ¡Despliega!
@chapter ¡Despliega!
@cindex ¡Despliega!

El siguiente capítulo puede ser, a veces, un poco difícil de
seguir. Ten paciencia y acábalo. El despliegue es una parte importante
del proceso en el desarrollo de un sitio web. Este capítulo está a
mitad del tutorial para que tu mentor pueda ayudarte a conseguir que
tu sitio web esté online, algo que puede ser un poco complicado. Así,
aunque se te acabe el tiempo, podrás terminar el tutorial por tu
cuenta.

Hasta ahora, tu sitio web sólo está disponible en tu ordenador. ¡Ahora
aprenderás como desplegarlo! El despliegue es el proceso de publicar
tu aplicación en internet para que la gente pueda acceder y ver tu
sitio web. :)

Como ya has aprendido, un sitio web tiene que estar en un
servidor. Hay muchos proveedores de servidores disponibles en
internet, nosotros vamos a usar @url{https://www.pythonanywhere.com/,
PythonAnywhere}. PythonAnywhere es gratuito para aplicaciones pequeñas
que no tienen muchos visitantes, y con eso tendrás más que suficiente
por ahora.

El otro servicio externo que vamos a utilizar es
@url{https://www.github.com/, GitHub}, un servicio de almacenamiento
de código. Hay otras opciones por ahí, pero hoy en día casi todas las
programadoras y programadores tenemos una cuenta de GitHub, ¡y ahora
tú también la vas a tener!

Estos tres lugares serán importantes para ti. Tu ordenador local será
el lugar donde desarrollas y pruebas. Cuando estés contento con los
cambios, subirás una versión de tu programa a GitHub. Tu sitio web
estará en PythonAnywhere y para actualizarlo descargarás la última
versión de tu código desde GitHub.

@section Git

Git es un "sistema de control de versiones" que utilizan muchos programadores. Este software puede seguir los cambios realizados en archivos a lo largo del tiempo de forma que más tarde puedas volver a cualquier versión anterior. Algo similar a la herramienta de "Control de Cambios" en los programas de tipo Word (por ejemplo, Microsoft Word o LibreOffice Writer), pero mucho más potente.

@section Instalar Git

@subsection Instalando Git: Windows

Puedes descargar Git desde git-scm.com. Puedes hacer click en "Next"
en todos los pasos excepto en dos: cuando se te pregunte que
selecciones tu editor, selecciona Nano, y en el paso "adjusting your
PATH environment", selecciona "Use Git and optional Unix tools from
the Windows Command Prompt" (la última opción). Aparte de eso, los
valores por defecto son correctos. "Checkout Windows-style, commit
Unix-style line endings" tampoco necesita corrección.

No olvides reiniciar el Símbolo del Sistema o el PowerShell una vez
que la instalación se complete con éxito.

@subsection Instalando Git: OS X

Descarga Git de git-scm.com y sigue las instrucciones.

@subsection Instalando Git: Debian o Ubuntu

@example
$ sudo apt install git
@end example

@subsection Instalando Git: Fedora

@example
$ sudo dnf install git
@end example

@subsection Instalando Git: openSUSE

@example
$sudo zypper install git
@end example

@section Crear nuestro repositorio Git

Git sigue los cambios realizados a un grupo determinado de archivos en
lo que llamamos un repositorio de código (abreviado "repo"). Vamos a
crear uno para nuestro proyecto. Abre la consola y ejecuta los
siguientes comandos en el directorio de djangogirls:

Nota Comprueba en qué directorio estás ahora mismo (es decir, el
directorio de trabajo actual) con el comando pwd (OSX/Linux) o cd
(Windows) antes de inicializar el repositorio. Deberías estar en la
carpeta djangogirls.

@example
$ git init
Initialized empty Git repository in ~/djangogirls/.git/
$ git config --global user.name "Tu nombre"
$ git config --global user.email tu@ejemplo.com
@end example

Inicializar el repositorio de git es algo que sólo tenemos que hacer
una vez por proyecto (y no tendrás que volver a teclear tu nombre de
usuario y correo electrónico nunca más).

Git llevará un seguimiento de los cambios realizados en todos los
archivos y carpetas en este directorio, pero hay algunos archivos que
queremos que ignore. Esto lo hacemos creando un archivo llamado
.gitignore en el directorio base. Abre tu editor y crea un nuevo
archivo con el siguiente contenido:

@example
*.pyc
*~
__pycache__
myvenv
db.sqlite3
/static
.DS_Store
@end example

Y guárdalo como .gitignore en la carpeta "djangogirls".

Nota ¡El punto al principio del nombre del archivo es importante! Si
tienes problemas para crearlo (a los Mac no les gusta que crees
ficheros con un punto al principio del nombre usando el Finder por
ejemplo), entonces usa la opción "Save As" o "Guardar como" de tu
editor, esto funcionará seguro. Asegúrate de no añadir .txt, .py, o
ninguna otra extensión al nombre de fichero -- Git solo lo reconocerá
si se llama exactamente .gitignore, sin nada más.

Nota Uno de los archivos especificados en tu .gitignore es
db.sqlite3. Ese fichero es tu base de datos local, donde se almacenan
los usuarios y publicaciones de tu blog. Vamos a seguir las buenas
prácticas de programación web: vamos a usar bases de datos separadas
para tu sitio local y tu sitio en producción en PythonAnywhere. La
base de datos en PythonAnywhere podría ser SQLite, como en tu máquina
de desarrollo, pero también podrías usar otro gestor de base de datos
como MySQL o PostgreSQL que pueden soportar muchas más visitas que
SQLite. En cualquier caso, al ignorar la base de datos SQLite en tu
copia de GitHub, todos los posts y el super usuario que has creado
hasta el momento solo estarán disponibles en local, y tendrás que
crear nuevos usuarios y publicaciones en producción. Tu base de datos
local es un buen campo de pruebas donde puedes probar diferentes cosas
sin miedo a estropear o borrar las publicaciones reales de tu blog.

Te recomendamos utilizar el comando git status antes de git add o en
cualquier momento en que no sepas muy bien lo que ha cambiado. Esto te
ayudará a evitar sorpresas, como subir cambios o archivos que no
queríamos subir. El comando git status muestra información sobre
cualquier archivo no seguido ("untracked"), modificado ("modified"),
preparado ("staged"), el estado de la rama y muchas cosas más. La
salida debería ser parecida a esto:

@example
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        .gitignore
        blog/
        manage.py
        mysite/
        requirements.txt

nothing added to commit but untracked files present (use
"git add" to track)
@end example

Y finalmente guardamos nuestros cambios. Ve a la consola y ejecuta
estos comandos:

@example
$ git add --all .
$ git commit -m "Mi aplicación Django Girls, primer commit"
 [...]
 13 files changed, 200 insertions(+)
 create mode 100644 .gitignore
 [...]
 create mode 100644 mysite/wsgi.py
@end example

@section Subiendo tu código a Github

Vete a GitHub.com y regístrate para obtener una cuenta de usuario
nueva y gratuita. (Si ya lo hiciste en la preparación del taller, ¡eso
es genial!) Asegúrate de recordar tu contraseña (agrégala a tu
administrador de contraseñas, si usas uno).

A continuación, crea un nuevo repositorio con el nombre
"my-first-blog". Deja el checkbox "initialize with a README" sin
marcar, deja la opción de .gitignore vacía (ya lo hemos hecho
manualmente) y deja la licencia como None.

@image{images/new_github_repo,6in,,New Github Repository}

Nota: El nombre my-first-blog es importante - podrías escoger otro,
pero va a salir muchas veces en las instrucciones que vienen a
continuación, y vas a tener que acordarte de cambiarlo cada vez. Lo
más fácil es quedarse con el nombre my-first-blog.

En la siguiente pantalla, verás la URL para clonar el repo, que
tendrás que usar en los comandos que van a continuación:

@image{images/github_get_repo_url_screenshot,6in,,My first blog}

Ahora necesitas enlazar el repositorio Git en tu ordenador con el
repositorio de GitHub.

Escribe lo siguiente en la consola (cambia <your-github-username> por
tu nombre de usuario de GitHub, pero sin los símbolos < y > -- fíjate
en que la URL debería coincidir con la URL para clonar el repo que
acabas de ver):

@example
$ git remote add origin
  https://github.com/<your-github-username>/my-first-blog.git
$ git push -u origin master
@end example

Cuando hagas push a GitHub, te preguntará tu usuario y password de
GitHub, y después de introducirlos, deberías ver algo como esto:

@example
Counting objects: 6, done.
Writing objects: 100% (6/6), 200 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/ola/my-first-blog.git

 * [new branch]      master -> master
Branch master set up to track remote branch master from origin.
@end example

Tu código ya está subido a GitHub. ¡Ve y compruébalo! Encontrarás que
está en buena compañía - @url{https://www.djangoproject.com/, Django},
@url{https://tutorial.djangogirls.org/es/, Django Girls Tutorial} y
muchos otros proyectos de software libre están alojados en GitHub. :)

@section Configurar nuestro blog en PythonAnywhere

@subsection Crea una cuenta en PythonAnywhere

Nota: A lo mejor ya has creado una cuenta en PythonAnywhere durante
los pasos de instalación. Si es así, no necesitas hacerlo otra vez.

PythonAnywhere es un servicio para ejecutar código Python en
servidores "en la nube". Lo vamos a usar para alojar nuestro sitio
para que esté disponible en Internet.

Almacenaremos del blog que estamos construyendo sobre
@url{https://www.pythonanywhere.com/, Python Anywhere}. Crea una
cuenta como "Principiante/Beginner" en Python Anywhere (el modo
gratuito está bien, no necesitas una tarjeta de crédito).

@image{images/pythonanywhere_beginner_account_button,6in,,Plans and
Pricing}

Nota Cuando elijas un nombre de usuario, recuerda que la URL de tu
blog tendrá la forma tunombredeusuario.pythonanywhere.com, así que lo
mejor será usar tu apodo o elegir un nombre que indique de qué trata
tu blog. Asegúrate también de recordar tu contraseña (añádela a tu
gestor de contraseñas, si usas uno).

@subsection Crear un token para la API de PythonAnywhere

Este paso solo necesita ser completado una vez. Una vez que te hayas
registrado en PythonAnywhere, serás llevado a tu tablón
principal. Encontrarás el enlace a la página de tu "Cuenta" en la
esquina superior derecha:

Enlace de cuenta en la parte superior derecha de la página

Después selecciona la lengueta llamada "API token", y haz click en el
botón que dice "Crear nueva API token".

@subsection Configurar nuestro sitio en PythonAnywhere

Vuelve al @url{https://www.pythonanywhere.com/, dashboard de
PythonAnywhere} haciendo click en el logo, y escoge la opción de
iniciar una consola "Bash" – esta terminal es como la que hay en tu
ordenador, pero en el servidor de PythonAnywhere.

@image{images/pythonanywhere_bash_console,6in,,New Console and Recent
Consoles}

Nota: PythonAnywhere está basado en Linux, así que si estás en
Windows, la consola será un poco distinta a la de tu ordenador.

Para desplegar una aplicación web en PythonAnywhere necesitas
descargar tu código de GitHub y configurar PythonAnywhere para que lo
reconozca y lo sirva como una aplicación web. Hay formas de hacerlo
manualmente, pero PythonAnywhere tiene una herramienta automática que
lo hará todo por nosotros. Lo primero, vamos a instalar la
herramienta:

@example
$ pip3.6 install --user pythonanywhere
@end example

Eso debería mostrar en pantalla algunos mensajes como Collecting
pythonanywhere, y finalmente una linea diciendo que ha terminado bien:
Successfully installed (...) pythonanywhere- (...).

Ahora ejecutaremos el asistente para configurar automáticamente
nuestra aplicación desde GitHub. Teclea lo siguiente en la consola de
PythonAnywhere (no te olvides de usar tu propio nombre de usuario de
GitHub en lugar de <your-github-username>, para que la URL sea como la
URL de clonar el repo de GitHub):

@example
$ pa_autoconfigure_django.py --python=3.6
https://github.com/<your-github-username>/my-first-blog.git
@end example

A medida que se ejecuta, podrás ver lo que hace:


@itemize @bullet
@item
Se descarga tu código de GitHub.

@item
Crea un virtualenv en PythonAnywhere, como el de tu propia computadora.

@item
Actualiza tus ficheros de settings con algunos settings de despliegue.

@item
Crea la base de datos en PythonAnywhere ejecutando el comando manage.py migrate.

@item
Configura los archivos estáticos (static) (luego hablaremos de éstos con más detalle).

@item
Y configura PythonAnywhere para publicar tu aplicación web a través de su API.

@end itemize

En PythonAnywhere todos estos pasos están automatizados, pero son los
mismos que tendrías que seguir en cualquier otro proveedor de
servidores.

Lo más importante que debes notar en este momento es que tu base de
datos en PythonAnywhere está totalmente separada de tu base de datos
en tu propia computadora, por lo que puedes tener diferentes
publicaciones y cuentas de administrador. Como consecuencia, igual que
lo hicimos en tu ordenador, tenemos que crear la cuenta de
administrador con el comando createsuperuser. PythonAnywhere ya ha
activado el virtualenv automáticamente, así que lo único que tienes
que hacer es ejecutar:

@example
(ola.pythonanywhere.com) $ python manage.py createsuperuser
@end example

Teclea las credenciales para tu usuario admin. Para evitar
confusiones, te recomendamos usar el mismo nombre de usuario que
usaste en tu ordenador local; aunque a lo mejor prefieres que la
contraseña en PythonAnywhere sea más segura.

Ahora, si quieres, también puedes ver tu código en PythonAnywhere con
el comando ls:

@example
(ola.pythonanywhere.com) $ ls
blog  db.sqlite3  manage.py  mysite requirements.txt static
(ola.pythonanywhere.com) $ ls blog/
__init__.py  __pycache__  admin.py  apps.py  migrations  models.py
tests.py  views.py
@end example

También puedes ir a la página de ficheros ("Files") y navegar por los
ficheros y directorios usando el visor de PythonAnywhere. (Desde la
página de la consola ("Console"), puedes ir a cualquier otra página de
PythonAnywhere usando el botón de la esquina superior derecha. Desde
el resto de páginas, también hay enlaces a las otras en la parte
superior.)

@section ¡Ya estás en vivo!

¡Tu sitio ya debería estar online en internet! Haz click en la página
"Web" de PythonAnywhere para obtener un enlace a él. Puedes compartir
este enlace con quien tu quieras :)

Nota: Este es un tutorial para principiantes, y al desplegar este
sitio hemos tomado algunos atajos que tal vez no sean las mejores
prácticas desde el punto de vista de la seguridad. Si decide construir
sobre este proyecto, o comenzar un nuevo proyecto, debe revisar la
lista de verificación de despliegue de Django para obtener algunos
consejos sobre cómo proteger su sitio.

@section Consejos de depuración

Si te sale un error al ejecutar el script pa_autconfigure_django.py,
aquí hay algunas causas comunes:

@itemize @bullet
@item
Te has olvidado de crear el token de API de PythonAnywhere.

@item
No has puesto bien la URL de GitHub.

@item
Si ves un error diciendo "Could not find your settings.py, es probable
que no añadieras todos tus archivos a Git, y/o no los subiste a GitHub
correctamente. Repasa la sección de Git más arriba.

@item
Si anteriormente te suscribiste a una cuenta de PythonAnywhere y
tuviste un error con collectstatic, probablemente tengas una versión
antigua de SQLite (por ejemplo, 3.8.2) en tu cuenta. En este caso,
regístrate con una nueva cuenta e intenta los comandos en la sección
PythonAnywhere anterior.

@end itemize

Si ves un error al visitar tu sitio, el primer lugar para ver qué está
pasando es el log de errores. Encontrarás un enlace en la página
"@url{https://www.pythonanywhere.com/web_app_setup/, Web}" de
PythonAnywhere. Mira si hay algún mensaje de error allí; los más
recientes están en la parte inferior.

Hay también algunos
@url{http://help.pythonanywhere.com/pages/DebuggingImportError,
consejos generales de depuración en la página de ayuda de
PythonAnywhere}.

Y recuerda, ¡tu mentora está aquí para ayudar!

@node URLs en Django
@chapter URLs en Django
@cindex URLs en Django

Estamos a punto de construir nuestra primera página web: ¡una página
de inicio para el blog! Pero primero, vamos a aprender un poco acerca
de las urls en Django.

@section ¿Qué es una URL?

Una URL es una dirección de la web. Puedes ver una URL cada vez que
visitas una página. Se ve en la barra de direcciones del
navegador. (Sí! ¡127.0.0.1:8000 es una URL! Y @url{https://djangogirls.org}
también es una URL.)

@image{images/url,6in,,django url}

Cada página en Internet necesita su propia URL. De esta manera tu
aplicación sabe lo que debe mostrar a un usuario que abre una URL. En
Django utilizamos algo que se llama URLconf (configuración de
URL). URLconf es un conjunto de patrones que Django intentará comparar
con la URL recibida para encontrar la vista correcta.

@section ¿Cómo funcionan las URLs en Django?

Vamos a abrir el archivo mysite/urls.py en el editor de código de tu
elección y veamos lo que tiene:

@example
"""mysite URL Configuration

[...]
"""
from django.contrib import admin
from django.urls import path

urlpatterns = [
    path('admin/', admin.site.urls),
]
@end example

Como puedes ver, Django ya puso algo aquí por nosotros.

Líneas entre triples comillas (''' o """) son llamadas docstrings -
puedes escribirlos en la parte superior de un archivo, clase o método
para describir lo que hace. No serán ejecutadas por Python.

La URL de admin, que hemos visitado en el capítulo anterior ya está
aquí:

@example
    path('admin/', admin.site.urls),
@end example

Esta línea dice que para cada URL que empieza con admin/ Django
encontrará su correspondiente view. En este caso estamos incluyendo
muchas URLs admin así que no todo está empaquetado en este pequeño
archivo. Es más limpio y legible.

@section ¡Tu primera URL de Django!

¡Es hora de crear nuestra primera URL! Queremos que
'http://127.0.0.1:8000/' sea la página de inicio del blog y que
muestre una lista de post.

También queremos mantener limpio el archivo mysite/urls.py, así que
vamos a importar las urls de nuestra aplicación blog en el archivo
principal mysite/urls.py.

Vamos, añade la línea para importar blog.urls. Tú también necesitarás
cambiar la línea desde django.urls... porque estaremos usando la
función include aquí, así que se necesitará añadir ese import a la
línea.

El archivo mysite/urls.py debería verse ahora así:

@example
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('blog.urls')),
]
@end example

Ahora Django redirigirá todo lo que entre a '@url{http://127.0.0.1:8000/}'
hacia blog.urls y buscará más instrucciones allí.

@section blog.urls

Crea un nuevo fichero vacío llamado urls.py en el directorio blog, y
ábrelo en el editor de código. ¡Vale! Añade las dos primeras líneas:

@example
from django.urls import path
from . import views
@end example

Aquí estamos importando la función de Django path y todos nuestras
views desde la aplicación blog (no tenemos una aun, pero veremos eso
en un minuto!)

Luego de esto, podemos agregar nuestro primer patrón URL:

@example
urlpatterns = [
    path('', views.post_list, name='post_list'),
]
@end example

Como puedes ver, estamos asociando una vista (view) llamada post_list
a la URL raíz. Este patrón de URL coincidirá con una cadena vacía y el
solucionador de URL de Django ignorará el nombre de dominio (es decir,
http://127.0.0.1:8000/) que prefija la ruta de URL completa. Este
patrón le dirá a Django que views.post_list es el lugar correcto al
que ir si alguien entra a tu sitio web con la dirección
'http://127.0.0.1:8000/'.

La última parte name='post_list' es el nombre de la URL que se
utilizará para identificar a la vista. Puede coincidir con el nombre
de la vista pero también puede ser algo completamente
distinto. Utilizaremos las URL con nombre más delante en el proyecto
así que es importante darle un nombre a cada URL de la
aplicación. También deberíamos intentar mantener los nombres de las
URL únicos y fáciles de recordar.

Si tratas de visitar http://127.0.0.1:8000/ ahora, encontrarás un
mensaje de error 'web page not available' a algo así. Esto es porque
el servidor (¿recuerdas que escribimos runserver?) ya no está
funcionando. Mira la ventana de la consola del servidor para saber por
qué.

@image{images/error1,6in,,error}

La consola esta mostrando un error, pero no te preocupes - de hecho es
muy útil: está diciendote que no existe el atributo 'post_list'. Ese
es el nombre del view que Django está tratando de encontrar y usar,
pero aún no lo hemos creado. En esta etapa tu /admin/ tampoco
funcionará. No te preocupes, ya llegaremos a eso. Si ves un error
diferente, intenta reiniciar el servidor web. Para hacerlo, en la
ventana de la consola que ejecuta el servidor web, deténgalo
presionando Ctrl+C (las teclas juntas Control y C). En Windows, es
posible que deba presionar Ctrl+Break. Luego, debe reiniciar el
servidor web ejecutando el comando python manage.py runserver.

Si quieres saber más sobre URLconfs de Django, mira la documentación
oficial: @url{https://docs.djangoproject.com/en/2.2/topics/http/urls/}

@node Vistas en Django - ¡Hora de crear!
@chapter Vistas en Django - ¡Hora de crear!
@cindex Vistas en Django - ¡Hora de crear!

Es hora de deshacerse del error que hemos creado en el capítulo
anterior! :)

Una View es un lugar donde ponemos la "lógica" de nuestra
aplicación. Pedirá información del modelo que has creado antes y se la
pasará a la plantilla. Crearemos una plantilla en el próximo
capítulo. Las vistas son sólo métodos de Python que son un poco más
complicados que los que escribimos en el capítulo Introducción a
Python.

Las Vistas se colocan en el archivo views.py. Agregaremos nuestras
views al archivo blog/views.py.

@section blog/views.py

Vale, abre este fichero en el editor y mira lo que hay en él:

@example
from django.shortcuts import render

# Create your views here.
@end example

No hay demasiadas cosas aquí todavía.

Recuerda que las líneas que comienzan con # son comentarios -
significa que Python no las ejecutará.

Creemos una vista (view) como sugiere el comentario. Añade la
siguiente mini-vista por debajo:

@example
def post_list(request):
    return render(request, 'blog/post_list.html', {})
@end example

Como puedes ver, hemos creado una función (def) llamada post_list que
acepta request y return una función render que reproduce (construye)
nuestra plantilla blog/post_list.html.

Guarda el archivo, ve a @url{http://127.0.0.1:8000/} y mira lo que hemos
hecho.

¡Otro error! Leamos lo que está pasando ahora:

@image{images/error,6in,,error}

Esto demuestra que el servidor está funcionando otra vez, al menos,
pero todavía no se ve bien, ¿no? No te preocupes, es sólo una página
de error, ¡nada que temer! Al igual que los mensajes de error en la
consola, estos son realmente muy útiles. Puedes leer que la
TemplateDoesNotExist. Vamos a corregir este error y crear una
plantilla en el próximo capítulo!

Obtenga más información sobre las vistas de Django leyendo la
documentación oficial:
@url{https://docs.djangoproject.com/en/2.2/topics/http/views/}

@node Introducci@'on a HTML
@chapter Introducci@'on a HTML
@cindex Introducci@'on a HTML

Te estarás preguntando, ¿qué es una plantilla?

Una plantilla es un archivo que podemos reutilizar para presentar
información diferente de forma consistente - por ejemplo, podrías
utilizar una plantilla para ayudarte a escribir una carta, porque
aunque cada carta puede contener un mensaje distinto y dirigirse a una
persona diferente, compartirán el mismo formato.

El formato de una plantilla de Django se describe en un lenguaje
llamado HTML (el HTML que mencionamos en el primer capítulo Cómo
funciona Internet).

@section ¿Qué es HTML?

HTML es un código simple que es interpretado por tu navegador web -
como Chrome, Firefox o Safari - para mostrar una página web al
usuario.

HTML significa HyperText Markup Language - en español, Lenguaje de
Marcas de HyperTexto. HyperText -hipertexto en español- significa que
es un tipo de texto que soporta hipervínculos entre páginas. Markup
significa que hemos tomado un documento y lo hemos marcado con código
para decirle a algo (en este caso, un navegador) cómo interpretar la
página. El código HTML está construido con etiquetas, cada una
comenzando con < y terminando con >. Estas etiquetas representan
elementos de marcado.

@section ¡Tu primera plantilla!

Crear una plantilla significa crear un archivo de plantilla. Todo es
un archivo, ¿verdad? Probablemente hayas notado esto ya.

Las plantillas se guardan en el directorio de blog/templates/blog. Así
que primero crea un directorio llamado templates dentro de tu
directorio blog. Luego crea otro directorio llamado blog dentro de tu
directorio de templates:

@example
blog
└───templates
    └───blog
@end example

(Tal vez te estés preguntando por qué necesitamos dos directorios
llamados blog – como verás más adelante, es una convención de nombres
que nos facilitará la vida cuando las cosas se pongan más
complicadas.)

Y ahora crea un archivo post_list.html (déjalo en blanco por ahora)
dentro de la carpeta blog/templates/blog.

Mira cómo se ve su sitio web ahora: @url{http://127.0.0.1:8000/}

Si todavía tienes un error TemplateDoesNotExist, intenta reiniciar tu
servidor. Ve a la consola, para el servidor pulsando Ctrl+C (las
teclas Control y C a la vez) y reinícialo ejecuntado el comando
@example
python manage.py runserver.
@end example

¡Ningún error más! Felicidades :) Sin embargo, por ahora, tu sitio web
no está publicando nada excepto una página en blanco, porque la
plantilla también está vacía. Tenemos que arreglarlo.

Abre un fichero nuevo en el editor y escribe lo siguiente:

@image{images/step1,6in,,step 1}

@example
<html>
<body>
    <p>Hi there!</p>
    <p>It works!</p>
</body>
</html>
@end example

Ahora, ¿cómo luce tu sitio web? Haz clic para verlo: @url{http://127.0.0.1:8000/}

@image{images/step3,6in,,step 3}

¡Funcionó! Buen trabajo :)

@itemize @bullet
@item
La etiqueta más básica, <html>, siempre va al inicio de cualquier
página web y </html> va siempre al final. Como puedes ver, todo el
contenido de la página web va desde el principio de la etiqueta <html
> y hasta la etiqueta de cierre </html >

@item
<p> es una etiqueta para los elementos de párrafo; </p> cierra cada párrafo

@end itemize

@section Cabeza y cuerpo

Cada página HTML también se divide en dos elementos: head y body.

@itemize @bullet
@item
head es un elemento que contiene información sobre el documento que no
se muestra en la pantalla.

@item
body es un elemento que contiene todo lo que se muestra como parte de
la página web.

@end itemize

Usamos <head> para decirle el navegador acerca de la configuración de
la página y <body> para decir lo que realmente está en la página.

Por ejemplo, puedes ponerle un título a la página web dentro de la
<head>, así:

@example
<html>
    <head>
        <title>Ola's blog</title>
    </head>
    <body>
        <p>Hi there!</p>
        <p>It works!</p>
    </body>
</html>
@end example

Guarda el archivo y actualiza tu página.

¿Observas cómo el navegador ha comprendido que "Ola's blog" es el
título de tu página? Ha interpretado <title>Ola's blog</title> y
colocó el texto en la barra de título de tu navegador (también se
utilizará para marcadores y así sucesivamente).

Probablemente también hayas notado que cada etiqueta de apertura
coincide con una etiqueta de cierre, con un /, y que los elementos son
anidados (es decir, no puedes cerrar una etiqueta particular hasta que
todos los que estaban en su interior se hayan cerrado también).

Es como poner cosas en cajas. Tienes una caja grande, <html></html>;
en su interior hay <body></body>, y que contiene las cajas aún más
pequeñas: <p></p>.

Tienes que seguir estas reglas de etiquetas de cierre y de anidación
de elementos - si no lo haces, el navegador puede no ser capaz de
interpretarlos apropiadamente y tu página se mostrará incorrectamente.

@section Personaliza tu plantilla

¡Ahora puedes divertirte un poco y tratar de personalizar tu
plantilla! Aquí hay algunas etiquetas útiles para eso:

@itemize @bullet
@item
<h1>Un título</h1> - para tu título más importante

@item
<h2>Un subtítulo</h2> - para el título del siguiente nivel

@item
<h3>Un subsubtítulo</h3> - ... y así hasta <h6>

@item
<p>Un párrafo de texto</p>

@item
<em>texto</em> - pone en cursiva tu texto

@item
<strong>texto</strong> - pone en negrita tu texto

@item
<br> va en otra línea (no puedes poner nada dentro de br y no hay etiqueta de cierre)

@item
<a href="https://djangogirls.org">link</a> - crea un vínculo

@item
<ul><li>primer elemento</li><li>segundo elemento</li></ul> - crea una lista, ¡igual que esta!

@item
<div></div> - define una sección de la página

@end itemize

Aquí va un ejemplo de una plantilla completa, cópialo y pégalo en
blog/templates/blog/post_list.html:

@example
<html>
    <head>
        <title>Django Girls blog</title>
    </head>
    <body>
        <div>
            <h1><a href="/">Django Girls Blog</a></h1>
        </div>

        <div>
            <p>published: 14.06.2014, 12:14</p>
            <h2><a href="">My first post</a></h2>
            <p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.</p>
        </div>

        <div>
            <p>published: 14.06.2014, 12:14</p>
            <h2><a href="">My second post</a></h2>
            <p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut f.</p>
        </div>
    </body>
</html>
@end example

Aquí hemos creado tres secciones div.

@itemize @bullet
@item
El primer elemento div contiene el título de nuestro blog - es un encabezado y un enlace

@item
Otros dos elementos div contienen nuestras publicaciones (posts) del
blog con su fecha de publicación, h2 con el título del post que es
clickable y dos ps (párrafos) de texto, uno para la fecha y otro para
el contenido del post.

@end itemize

Nos da este efecto:

@image{images/step6,6in,,step 6}

¡Yaaay! Pero hasta el momento, nuestra plantilla sólo muestra
exactamente la misma información - considerando que antes hablábamos
de plantillas como permitiéndonos mostrar información diferente en el
mismo formato.

Lo que queremos realmente es mostrar posts reales añadidos en nuestra
página de administración de Django - y ahí es a donde vamos a
continuación.

@section Una cosa más: ¡despliega!

Sería bueno ver todo esto disponible en Internet, ¿no? Hagamos otro
despliegue en PythonAnywhere:

@subsection Haz commit, y sube tu código a GitHub

En primer lugar, vamos a ver qué archivos han cambiado desde la última
puesta en marcha (ejecute estos comandos localmente, no en
PythonAnywhere):

@example
$ git status
@end example

Asegúrate de que estás en el directorio djangogirls y vamos a decirle
a git que incluya todos los cambios en este directorio:

@example
$ git add --all .
@end example

Nota: --all significa que git tambien reconocerá si has borrado
archivos (por defecto, solo reconoce archivos nuevos o
modificados). También recuerda (del capítulo 3) que . significa el
directorio actual.

Antes de que subamos todos los archivos, vamos a ver qué es lo que git
subirá (todos los archivos que git cargará deberían aparecer en
verde):

@example
$ git status
@end example

Ya casi estamos, ahora es tiempo de decirle que guarde este cambio en
su historial. Vamos a darle un "mensaje de commit" donde describimos
lo que hemos cambiado. Puedes escribir cualquier cosa que te gustaría
en esta etapa, pero es útil escribir algo descriptivo para que puedes
recordar lo que has hecho en el futuro.

@example
$ git commit -m "Cambie el HTML para la página."
@end example

Nota: Asegúrate de usar comillas dobles alrededor del mensaje de
commit.

Una vez hecho esto, subimos (push) los cambios a Github:

@example
$ git push
@end example

@section Descarga tu nuevo código a PythonAnywhere y actualiza tu aplicación web

Abre la página de consolas de PythonAnywhere y ve a tu consola Bash (o
comienza una nueva). Luego, ejecuta:

@example
$ cd ~/<your-pythonanywhere-domain>.pythonanywhere.com
$ git pull
[...]
@end example

Necesitarás sustituir <your-pythonanywhere-domain> con tu actual
nombre de subdominio PythonAnywhere, sin los paréntesis angulares o
corchetes. Tu nombre de subdominio es normalmente tu nombre de usuario
PythonAnywhere, pero en algunos casos puede ser un poco diferente (por
ejemplo, si tu nombre de usuario contiene letras mayúsculas). Así, si
este comando no funciona, usa el comando ls(listar archivos) para
encontrar tu actual subdominio/nombre-carpeta, y muévete allí con cd.

Ahora mira cómo se descarga tu código. Si quieres comprobar que
efectivamente ha llegado bien, puedes ir a la página "Files" y ver tu
código en PythonAnywhere (puedes ir a otras páginas de PythonAnywhere
desde el botón de la esquina superior derecha de la página de la
consola).

Finalmente, ve a la
@url{https://www.pythonanywhere.com/web_app_setup/, página "Web"} y
pulsa Reload en tu aplicación web.

¡Tu nueva versión ya debería estar publicada! Ve al navegador y
refresca tu sitio web. Deberías ver los cambios. :)

@node ORM de Django y QuerySets
@chapter ORM de Django y QuerySets
@cindex ORM de Django y QuerySets

En este capítulo aprenderás cómo Django se conecta a la base de datos
y almacena los datos en ella. ¡Vamos a sumergirnos!

@section ¿Qué es un QuerySet?

Un QuerySet es, en esencia, una lista de objetos de un modelo
determinado. Un QuerySet te permite leer los datos de la base de
datos, filtrarlos y ordenarlos.

Es más fácil de aprender con ejemplos. Vamos a intentarlo, ¿de
acuerdo?

@section Django shell

Abre tu consola local (no la de PythonAnywhere) y escribe este
comando:

@example
(myvenv) ~/djangogirls$ python manage.py shell
@end example

El resultado debería ser:

@example
(InteractiveConsole)
>>>
@end example

Ahora estás en la consola interactiva de Django. Es como una consola
de Python normal, pero con un poco de magia de Django. :) Aquí también
se pueden usar todos los comandos de Python.

@section Todos los objetos

Vamos a mostrar todos nuestros posts primero. Puedes hacerlo con el
siguiente comando:

@example
>>> Post.objects.all()
Traceback (most recent call last):
      File "<console>", line 1, in <module>
NameError: name 'Post' is not defined
@end example

¡Uy! Apareció un error. Nos dice que Post no existe. Esto es correcto,
¡olvidamos importarlo!

@example
>>> from blog.models import Post
@end example

Vamos a importar el modelo Post de blog.models. Y probamos de nuevo a
mostrar todas las publicaciones (posts):

@example
>>> Post.objects.all()
<QuerySet [<Post: my post title>, <Post: another post title>]>
@end example

¡Es la lista de posts que creamos anteriormente! Creamos estos posts
usando la interfaz de administración de Django. Pero, ahora queremos
crear nuevos posts usando Python, ¿cómo lo hacemos?

@section Crear objetos

Esta es la forma de crear un nuevo objeto Post en la base de datos:

@example
>>> Post.objects.create(author=me, title='Sample title', text='Test')
@end example

Pero nos falta un ingrediente aquí: me. Tenemos que pasar una
instancia del modelo User como autor. ¿Eso cómo se hace?

Primero importemos el modelo User:

@example
>>> from django.contrib.auth.models import User
@end example

¿Qué usuarios tenemos en nuestra base de datos? Prueba esto:

@example
>>> User.objects.all()
<QuerySet [<User: ola>]>
@end example

¡Este es el superusuario que hemos creado antes! Ahora, vamos a
obtener una instancia de este usuario (cambia el código para usar tu
propio nombre de usuario):

@example
>>> me = User.objects.get(username='ola')
@end example

Como ves, ya hemos obtenido (get) un usuario (User) cuyo username es
igual a 'ola'. ¡Mola!

Ahora, finalmente, podemos crear nuestra entrada:

@example
>>> Post.objects.create(author=me, title='Sample title', text='Test')
<Post: Sample title>
@end example

¡Hurra! ¿Quieres probar si funcionó?

@example
>>> Post.objects.all()
<QuerySet [<Post: my post title>, <Post: another post title>, <Post: Sample title>]>
@end example

¡Ahí está, una entrada de blog más en la lista!

@section Agrega más entradas

Ahora puedes divertirte un poco y agregar más entradas para ver cómo
funciona. Agrega dos o tres más y avanza a la siguiente parte.

@section Filtrar objetos

Una parte importante de los QuerySets es la habilidad para filtrar los
resultados. Digamos que queremos encontrar todos los post del usuario
ola. Usaremos filter en vez de all en Post.objects.all(). Entre
paréntesis estableceremos qué condición (o condiciones) debe cumplir
un post del blog para aparecer como resultado en nuestro queryset. En
nuestro caso sería author es igual a me. La forma de escribirlo en
Django es: author=me. Ahora nuestro bloque de código tiene este
aspecto:

@example
>>> Post.objects.filter(author=me)
<QuerySet [<Post: Sample title>, <Post: Post number 2>, <Post: My 3rd
post!>, <Post: 4th title of post>]>
@end example

¿O quizá queremos ver todas las entradas que contengan la palabra
'title' en el campo title?

@example
>>> Post.objects.filter(title__contains='title')
<QuerySet [<Post: Sample title>, <Post: 4th title of post>]>
@end example

Nota Hay dos guiones bajos (_) entre title y contains. El ORM de
Django utiliza esta sintaxis para separar los nombres de los campos
("title") de las operaciones o filtros ("contains"). Si sólo utilizas
un guion bajo, obtendrás un error como "FieldError: Cannot resolve
keyword title_contains".

También puedes obtener una lista de todos los post publicados. Lo
hacemos filtrando los post que tienen la fecha de publicación,
published_date, en el pasado:

@example
>>> from django.utils import timezone
>>> Post.objects.filter(published_date__lte=timezone.now())
<QuerySet []>
@end example

Por desgracia, el post que hemos añadido desde la consola de Python
aún no está publicado. ¡Pero lo podemos cambiar! Primero obtén una
instancia de la entrada que queremos publicar:

@example
>>> post = Post.objects.get(title="Sample title")
@end example

Y luego publícala con nuestro método publish:

@example
>>> post.publish()
@end example

Ahora vuelve a intentar obtener la lista de posts publicados (pulsa la
tecla de "flecha arriba" tres veces y pulsa enter):

@example
>>> Post.objects.filter(published_date__lte=timezone.now())
<QuerySet [<Post: Sample title>]>
@end example

@section Ordenar objetos

Los QuerySets también te permiten ordenar la lista de
objetos. Intentemos ordenarlos por el campo created_date:

@example
>>> Post.objects.order_by('created_date')
<QuerySet [<Post: Sample title>, <Post: Post number 2>, <Post: My 3rd post!>, <Post: 4th title of post>]>
@end example

También podemos invertir el orden agregando - al principio:

@example
>>> Post.objects.order_by('-created_date')
<QuerySet [<Post: 4th title of post>,  <Post: My 3rd post!>, <Post: Post number 2>, <Post: Sample title>]>
@end example

@section Consultas complejas a través de encadenamiento de métodos

Como ves, algunos métodos en Post.objects devuelven un QuerySet. Los
mismos métodos pueden ser llamados también en un QuerySet, y entonces
devolverán un nuevo QuerySet. También puedes combinar QuerySets
encadenando uno con otro:

@example
>>> Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
<QuerySet [<Post: Post number 2>, <Post: My 3rd post!>, <Post: 4th title of post>, <Post: Sample title>]>
@end example

Es muy potente y te permite escribir consultas bastante complejas.

¡Genial! ¡Ahora estás lista para la siguiente parte! Para cerrar la consola, escribe esto:

@example
>>> exit()
$
@end example

@section Datos dinámicos en plantillas

Tenemos diferentes piezas en su lugar: el modelo Post está definido en
models.py, tenemos a post_list en views.py y la plantilla
agregada. ¿Pero cómo haremos realmente para que nuestros posts
aparezcan en nuestra plantilla HTML? Porque eso es lo que queremos,
tomar algún contenido (modelos guardados en la base de datos) y
mostrarlo adecuadamente en nuestra plantilla, ¿no?

Esto es exactamente lo que las views se supone que hacen: conectar
modelos con plantillas. En nuestra view post_list necesitaremos tomar
los modelos que deseamos mostrar y pasarlos a una plantilla. En una
vista decidimos qué (modelo) se mostrará en una plantilla.

Muy bien, entonces ¿cómo lo logramos?

Tenemos que abrir blog/views.py en el editor. De momento post_list
view tiene esto:

@example
from django.shortcuts import render

def post_list(request):
    return render(request, 'blog/post_list.html', {})
@end example

¿Recuerdas cuando hablamos de incluir código en diferentes archivos?
Ahora tenemos que incluir el modelo que definimos en el archivo
models.py. Agregaremos la línea from .models import Post de la
siguiente forma:

@example
from django.shortcuts import render
from .models import Post
@end example

El punto antes de models indica el directorio actual o la aplicación
actual. Ambos, views.py y models.py están en el mismo directorio. Esto
significa que podemos utilizar . y el nombre del archivo (sin
.py). Ahora importamos el nombre del modelo (Post).

¿Pero ahora qué sigue? Para tomar posts reales del modelo Post,
necesitamos algo llamado QuerySet.

@section QuerySet

Ya debes estar familiarizada con la forma en que funcionan los
QuerySets. Hablamos de ellos en el capítulo
@url{https://tutorial.djangogirls.org/es/django_orm/, Django ORM
(QuerySets)}.

Así que ahora nos interesa tener una lista de post publicados
ordenados por published_date (fecha de publicación), ¿no? ¡Ya lo
hicimos en el capítulo QuerySets!

@example
Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
@end example

Abre blog/views.py en el editor, y añade este trozo de código a la
función def post_list(request) -- pero no te olvides de añadir from
django.utils import timezone antes:

@example
from django.shortcuts import render
from django.utils import timezone
from .models import Post

def post_list(request):
    posts = Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
    return render(request, 'blog/post_list.html', {})
@end example

La última parte es pasar el QuerySet posts a la plantilla context. No
te preocupes, enseñaremos cómo mostrarlo más adelante.

Fíjate en que creamos una variable para el QuerySet: posts. Trátala
como si fuera el nombre de nuestro QuerySet. De aquí en adelante vamos
a referirnos al QuerySet con ese nombre.

En la función render tenemos el parámetro request (todo lo que
recibimos del usuario via Internet) y otro parámetro dándole el
archivo de la plantilla ('blog/post_list.html'). El último parámetro,
que se ve así: {} es un lugar en el que podemos agregar algunas cosas
para que la plantilla las use. Necesitamos nombrarlos (los seguiremos
llamando 'posts' por ahora). :) Se debería ver así: {'posts':
posts}. Fíjate en que la parte antes de : es una cadena; tienes que
envolverla con comillas: ".

Finalmente nuestro archivo blog/views.py debería verse así:

@example
from django.shortcuts import render
from django.utils import timezone
from .models import Post

def post_list(request):
    posts = Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
    return render(request, 'blog/post_list.html', {'posts': posts})
@end example

¡Terminamos! Ahora regresemos a nuestra plantilla y mostremos este QuerySet.

¿Quieres leer un poco más sobre QuerySets en Django? Deberías mirar aquí:
@url{https://docs.djangoproject.com/en/2.2/ref/models/querysets/}

@node Plantillas de Django
@chapter Plantillas de Django
@cindex Plantillas de Django

¡Es hora de mostrar algunos datos! Para ello Django incorpora unas
etiquetas de plantillas, template tags, muy útiles.

@section ¿Qué son las etiquetas de plantilla?

Verás, en HTML no se puede escribir código en Python porque los
navegadores no lo entienden. Sólo saben HTML. Sabemos que HTML es
bastante estático, mientras que Python es mucho más dinámico.

Las etiquetas de plantilla de Django nos permiten insertar elementos
de Python dentro del HTML, para que puedas construir sitios web
dinámicos más rápida y fácilmente. ¡Genial!

@section Mostrar la plantilla lista de posts

En el capítulo anterior le dimos a nuestra plantilla una lista de
entradas en la variable posts. Ahora la vamos a mostrar en HTML.

Para imprimir una variable en una plantilla de Django, utilizamos
llaves dobles con el nombre de la variable dentro, algo así:

@example
{{ posts }}
@end example

Prueba esto en la plantilla blog/templates/blog/post_list.html. Ábrela
en el editor de código, y cambia todo desde el segundo <div> hasta el
tercer </div> por {{ posts }}. Guarda el archivo y refresca la página
para ver los resultados:

@image{images/step1,6in,,step 1}

Como puedes ver, lo que hemos conseguido es esto:

@example
<QuerySet [<Post: My second post>, <Post: My first post>] >
@end example

Significa que Django lo entiende como una lista de objetos. ¿Recuerdas
de Introducción a Python cómo podemos mostrar listas? Sí, ¡con bucles
for! En una plantilla de Django se hacen así:

@example
{% for post in posts %} {{ post }}{% endfor %}
@end example

Prueba esto en tu plantilla.

@image{images/step2,6in,,step 2}

¡Funciona! Pero queremos que se muestren como los post estáticos que
creamos anteriormente en el capítulo de Introducción a HTML. Usted
puede mezclar HTML y etiquetas de plantilla. Nuestro body se verá así:

@example
<div>
    <h1><a href="/">Django Girls Blog</a></h1>
</div>

{% for post in posts %}
    <div>
        <p> publicado: {{ post.published_date }}</p>
        <h2><a href="">{{ post.title }}</a></h2>
        <p>{{ post.text|linebreaksbr }}</p>
    </div>
{% endfor %}
@end example

Todo lo que pongas entre {% for %} y {% endfor %} se repetirá para
cada objeto de la lista. Refresca la página:

@image{images/step3,6in,,step 3}

¿Has notado que utilizamos una notación diferente esta vez ({{
post.title }} o {{ post.text }})? Estamos accediendo a los datos en
cada uno de los campos definidos en nuestro modelo Post. También el
|linebreaksbr está pasando el texto de los post a través de un filtro
para convertir saltos de línea en párrafos.

@section Una cosa más

Sería bueno ver si tu sitio web seguirá funcionando en la Internet pública, ¿no? Vamos a intentar desplegar de nuevo en PythonAnywhere. Aquí va un resumen de los pasos…

1. Lo primero, sube tu código a GitHub

@example
$ git status
[...]
$ git add --all .
$ git status
[...]
$ git commit -m "Templates modificados para mostrar post desde base de datos."
[...]
$ git push
@end example

2. Luego, vuelve a entrar en PythonAnywhere y ve a tu consola Bash (o
inicia una nueva), y ejecuta:

@example
$ cd <your-pythonanywhere-domain>.pythonanywhere.com
$ git pull
[...]
@end example

(Recuerda sustituir <your-pythonanywhere-domain> con tu subdominio de
PythonAnywhere real, sin los paréntesis angulares.)


3. Y finalmente, dirígete a la página "Web" y haz clic en Reload en tu
aplicación web. (Para ir a otras páginas de PythonAnywhere desde la
consola, haz clic en el botón de la esquina superior derecha.) Los
cambios deberían estar visibles en
@url{https://subdomain.pythonanywhere.com} -- ¡compruébalo en el navegador!
Si ves distintas publicaciones en el sitio en PythonAnywhere de las
que tienes en tu servidor local, es lo normal. Tienes dos bases de
datos, una en tu ordenador local y otra en PythonAnywhere y no tienen
por qué tener el mismo contenido.

¡Felicidades! Ahora intenta añadir un nuevo post en tu administrador
de Django (recuerda añadir published_date!) Asegúrate de que estás en
el administrador de Django de PytonAnywhere,
https://tunombre.pythonanywhere.com/admin. Luego actualiza tu página
para ver si los posts aparecen.

¿Funciona de maravilla? ¡Estamos orgullosas! Aléjate un rato del
ordenador, te has ganado un descanso. :)

@image{images/donut,6in,,donut}



@node Index
@unnumbered Index
@printindex cp

@bye
