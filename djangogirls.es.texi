\input texinfo   @c -*-texinfo-*-
@comment $Id@w{$}
@comment %**start of header
@include version.texi
@settitle Tutorial de Django Girls @value{VERSION}
@syncodeindex pg cp
@comment %**end of header
@include copying-fdl.texi

@titlepage
@title Tutorial de Django Girls
@subtitle para la versi@'on @value{VERSION}, @value{UPDATED}
@documentencoding UTF-8
@documentlanguage es

@author Django Girls
@author Revisado por David Arroyo Men@'endez (@email{davidam@@gmail.com})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Arriba
@top Tutorial de Django Girls

Este manual es acerca de Django (version @value{VERSION}, @value{UPDATED}).
@end ifnottex

@menu
* Introducci@'on::
* Instalaci@'on::
* C@'omo funciona Internet::
* Introducci@'on a la l@'{@dotless{i}}nea de comandos::
* Instalaci@'on de Python::
* Editor de C@'odigo::
* Introducci@'on a Python::
* ¿Qué es Django?::
* Instalaci@'on de Django::
* ¡Tu primer proyecto en Django!::
* Modelos en Django::
* Administrador de Django::
* ¡Despliega!::
* URLs en Django::
* Vistas en Django - ¡Hora de crear!::
* Introducci@'on a HTML::
* ORM de Django (QuerySets)::
* Datos dinámicos en las plantillas::
* Plantillas de Django::
* CSS - ¡Qué quede bonito!::
* Extendiendo plantillas::
* Amplia tu aplicaci@'on::
* Formularios de Django::
* ¿Y ahora qu@'e?::
* Licencia::
* Photos::
* Index::


@end menu

@node Introducci@'on
@chapter Introducci@'on
@cindex Introducci@'on

@section Bienvenida

¡Bienvenido/a al tutorial de las Django Girls! ¡Nos alegra que est@'es
aqu@'{@dotless{i}} :) En este tutorial, te llevaremos de viaje a las
entrañas de la tecnolog@'{@dotless{i}}a web, para que veas todas las
piezas que se necesitan para que la web funcione.

Como pasa con todas las cosas nuevas, va a ser una aventura - pero no
te preocupes; una vez que te has decidido a empezar, te ir@'a de
maravilla :)

@section Introducci@'on

¿Alguna vez has tenido la sensaci@'on de que el mundo es cada vez
m@'as tecnol@'ogico? ¿que cada vez lo entiendes menos? ¿Alguna vez te
has planteado crear un sitio web pero no sab@'{@dotless{i}}as por
d@'onde empezar? ¿Has pensado alguna vez que el mundo del software es
demasiado complicado como para intentar hacer algo por tu cuenta?

Bueno, ¡tenemos buenas noticias! Programar no es tan
dif@'{@dotless{i}}cil como parece y queremos demostrarte lo divertido
que puede llegar a ser.

Este tutorial no te convertirá en programadora de la noche a la
mañana. Si quieres ser buena en esto, necesitarás meses o incluso años
de aprendizaje y práctica. Sin embargo queremos enseñarte que
programar o crear sitios web no es tan complicado como
parece. Intentaremos explicar las cosas lo mejor que podamos, para
perderle el miedo a la tecnología.

¡Esperamos conseguir que te guste la tecnología tanto como a nosotras!

@section ¿Qué aprenderás con este tutorial?

Cuando termines el tutorial, tendr@'as una aplicaci@'on web sencilla y
funcional: tu propio blog. Te mostraremos como ponerla en
l@'{@dotless{i}}nea, ¡para que otros puedan ver tu trabajo!

Tendr@'a (m@'as o menos) esta pinta:

@image{images/application,6in,,Django Girls Blog}

Si estás siguiendo este tutorial por tu cuenta y no tienes un mentor
que te ayude en caso de dificultades, tenemos un chat para ti:
Gitter. ¡Hemos pedido a mentores y asistentes de ediciones anteriores,
que pasen por all@'{@dotless{i}} de vez en cuando para echar una mano
a otras con el tutorial! ¡No tengas miedo de preguntar
ah@'{@dotless{i}}!

Si estás siguiendo este tutorial por tu cuenta y no tienes un mentor
que te ayude en caso de dificultades, tenemos un chat para ti:
@url{https://gitter.im/DjangoGirls/tutorial, Gitter}. ¡Hemos pedido a
mentores y asistentes de ediciones anteriores, que pasen por allí de
vez en cuando para echar una mano a otras con el tutorial! ¡No tengas
miedo de preguntar ahí!

@section Seguir el tutorial desde casa

Participar en un taller de Django Girls en vivo es genial, pero somos
conscientes de que no siempre es posible hacerlo. Por eso, te
recomendamos hacer este tutorial en casa. Para las que est@'ais en
casa, estamos preparando v@'{@dotless{i}}deos que facilitar@'an seguir
el tutorial por tu cuenta. Todav@'{@dotless{i}}a est@'a en progreso,
pero cada vez hay m@'as cosas explicadas en el canal de YouTube
@uref{https://www.youtube.com/channel/UC0hNd2uW8jTR5K3KBzRuG2A/feed,
Coding is for girls} (Nota: en inglés).

En cada cap@'{@dotless{i}}tulo hay un enlace que lleva al
v@'{@dotless{i}}deo correspondiente (si lo hay).

@section Sobre nosotras y C@'omo contribuir

Este tutorial lo mantiene @uref{https://djangogirls.org/,
DjangoGirls}. Si encuentras algún error o quieres actualizar el
tutorial, por favor
@uref{https://github.com/DjangoGirls/tutorial/blob/master/README.md,
sigue la gu@'{@dotless{i}}a de c@'omo contribuir}

@section ¿Te gustaría ayudarnos a traducir el tutorial a otros idiomas?

Actualmente, las traducciones se hacen en la plataforma crowdin.com,
en el siguiente enlace:

@uref{https://crowdin.com/project/django-girls-tutorial}

Si tu idioma no aparece en la lista de crowdin, por favor abre un
nuevo issue con el idioma para que podamos añadirlo.

@node Instalaci@'on
@chapter Instalaci@'on
@cindex Instalaci@'on

@section Si est@'as haciendo el tutorial en casa

Si estás haciendo el tutorial en casa, y no en uno de los eventos de
Django Girls, puedes saltar este capítulo por completo e ir
directamente al capítulo ¿cómo funciona Internet?.

Esto es porque cubrimos las instalaciones de cosas a medida que se
requieran en el tutorial -- esta es solamente una página adicional que
reúne toda la información de instalación en un solo lugar (lo que es
útil para algunos formatos de taller). Puedes escoger instalar todo lo
que está en esta página ya mismo si lo deseas. Pero si quieres empezar
a aprender cosas antes de instalar un grupo de materiales en tu
computadora, salta este capítulo y te explicaremos las partes de la
instalación luego, cuando sean necesarias.

¡Buena suerte!

@section Si est@'as asistiendo a un workshop

Si estás asistiendo a uno de los Django Girls events:

Tu workshop puede tener una "fiesta de instalación" antes del workshop
principal. Si estás en un equipo de instalación, ¡ésta página es para
ti! Sigue las instrucciones aquí para obtener todo lo que tu necesitas
para el workshop de instalación, con la ayuda de los entrenadores si
lo necesitas. Entonces en el workshop principal, tu estarás preparado
para saltar las instrucciones de instalación que encontrarás en el
tutorial principal cuando llegues a ellos.

Los organizadores del taller pueden pedirte que en casa intentes
instalar todo en tu computadora antes de iniciar el taller. Si has
estado preguntando cómo hacer esto, ¡esta página es para ti! Sigue las
instrucciones aquí, lo mejor puedas. Así, en el taller principal,
cuando estés en uno de los pasos de la instalación del tutorial, y si
no tenías esa pieza instalada, puedes pedir ayuda a una de tus
entrenadoras.

Si tu taller no tiene una sesión de instalación (o no pudiste
asistir), y si los organizadores no te piden que intentes instalar
todo antes de tu llegada, salta esta página y ve al capítulo Cómo el
internet funciona. Instalarás todo lo que necesitas para trabajar a lo
largo del tutorial.

@section Instalaci@'on

En este tutorial vas a construir un blog. Según cómo vayas a través
del tutorial, serás instruida en cómo instalar varios softwares en tu
computadora y configurar algunas cuentas online como sean
necesarias. Esta página reune todas las instalaciones e instrucciones
del registro en un lugar (el cual es útil para algunos formatos del
taller).

@section Breve introducci@'on a la l@'{@dotless{i}}nea de comandos

Muchos de los pasos citados abajo hacen referencia a la "consola",
"terminal", "ventana de comandos", o "línea de comandos" -- todos
éstos términos significan la misma cosa: una ventana en tu computadora
donde puedes introducir comandos. Cuando estés en el tutorial
principal, aprenderás más acerca de la línea de comandos. Por ahora,
la parte principal que necesitas es saber cómo abrir una ventana de
comandos y cómo luce:

@subsection Abriendo: Windows

Dependiendo de tu versión de Windows y tu teclado, una de las opciones
siguientes debería abrir una ventana de comandos (puede que necesites
experimentar un poco, pero no se necesita probar todas estas
sugerencias):

Ve al menú o pantalla de Inicio, y escribe "Símbolo del Sistema" en el
cuadro de búsqueda.
Ve a Menú de inicio → Windows System → Command Prompt.
Ve al menú de Inicio → Todos los Programas → Accessorios → Símbolo del
Sistema.

Ve a la pantalla de Inicio, pasa el rat@'on sobre la esquina inferior
izquierda de la pantalla, y haz click en la flecha hacia abajo (en una
pantalla t@'actil, desliza hacia arriba desde la parte baja de la
pantalla). La p@'agina de la Aplicaci@'on debería abrirse. Haz click
en S@'{@dotless{i}}mbolo del Sistema en la secci@'on Sistema de
Windows.

Mant@'en la tecla especial de Windows de tu teclado y pulsa "X". Elige
"S@'{@dotless{i}}mbolo del Sistema" del men@'u emergente.

Mant@'en pulsada la tecla de Windows y pulsa "R" para abrir una ventana
"Ejecutar". Escribe "cmd" en la caja, y haz click en OK.

@image{images/windows-plus-r,6in,,Windows Commands}

M@'as adelante en este tutorial, necesitar@'as tener dos consolas de
comandos abiertas a la misma vez. Sin embargo, en algunas versiones de
Windows, si ya tienes abierta una ventana de comandos e intentas abrir
otra usando el mismo m@'etodo, simplemente maximizar@'a la que ya
tienes abierta. ¡Int@'entalo ahora en tu ordenador y mira qu@'e
ocurre! Si solo se abre una ventana de comandos, intenta alguno de los
otros m@'etodos explicados anteriormente. Al menos uno de ellos
deber@'{@dotless{i}}a abrir una nueva ventana de comandos.

@subsection Abriendo: OS X

Ve a Aplicaciones → Utilidades → Terminal.

@subsection Abriendo: Linux

Probablemente se encuentre en Aplicaciones → Accesorios → Terminal, o
Aplicaciones → Sistema → Terminal, aunque esto dependerá de tu
sistema. Si no lo encuentras allí, intenta buscarlo en Google. :)

@section Instalar Python

Para lectores en casa: este capitulo se cubre en el vídeo
@uref{https://www.youtube.com/watch?v=pVTaqzKZCdA, Installing Python &
Code Editor.}

Esta sección está basada en un tutorial de
@uref{https://github.com/ggcarrots/django-carrots, Geek Girls Carrots}

Django está escrito en Python. Necesitamos Python para hacer cualquier
cosa en Django. ¡Empecemos con instalarlo! Queremos que instales la
última versión de Python 3, así que si tienes una versión anterior,
necesitarás actualizarla. Si ya tienes la versión 3.4 o una superior,
debería ir bien.

Por favor, instala Python normalmente de la siguiente forma, incluso
si tienes Anaconda instalada en el ordenador.

@subsection Instalar Python: Windows

Primero comprueba si tu ordenador ejecuta la versión 32 bits de
Windows o la de 64, en "Tipo de sistema" en la p@'agina de "Acerca
de". Para llegar a esta p@'agina, intenta uno de estos m@'etodos:

@itemize @bullet
@item
Presiona la tecla de Windows y la tecla Pause/Break al mismo tiempo

@item
Abre el Panel de Control desde el menú de Windows, después accede a
Sistema & y Seguridad, luego a Sistema

@item
Presiona el botón de Windows, luego accede a Configuración > Sistema >
Acerca de

@end itemize

Puedes descargar Python para Windows desde la siguiente web
@uref{https://www.python.org/downloads/windows/}. Clica en el enlace
"Latest Python 3 Release -Python x.x.x". Si tu ordenador ejecuta la
versión de 64 bits de Windows, descarga Windows x86-64 executable
installer. De lo contrario, descarga Windows x86 executable
installer. Después de descargar el instalador, deberías ejecutarlo
(dándole doble click) y seguir las instrucciones.

Una cosa para tener en cuenta: Durante la instalación, verás una
ventana de "Setup". Asegúrate de marcar las casillas "Add Python 3.6
to PATH" o "Add Python to your environment variables" y hacer click en
"Install Now", como se muestra aquí (puede que se vea un poco
diferente si estás instalando una versión diferente):

Cuando la instalación se complete, verás un cuadro de diálogo con un
enlace que puedes seguir para saber más sobre Python o sobre la
versión que has instalado. Cierra o cancela ese dialogo -- ¡Aprenderás
más en ese tutorial!

Nota: si estás usando una versión anterior de Windows (7, Vista o
cualquier versión anterior) y el instalador de la versión 3.6.x de
Python falla con un error, intenta también:

@itemize @bullet
@item
instalar todas las actualizaciones de Windows e intenta instalar
Python de nuevo; o

@item
instalar una versi@'on de
@url{https://www.python.org/downloads/windows/, Python anterior}, por
ejemplo, @url{https://www.python.org/downloads/release/python-346/,
3.4.6}.

@end itemize

Nota Antes de instalar Python en OS X, debes asegurarte de que la
configuración del Mac permita instalar paquetes que no estén en la App
Store. ve a preferencias del sistema (System Preferences, está en la
carpeta Aplicaciones), da click en "Seguridad y privacidad" (Security
& Privacy) y luego la pestaña "General". Si tu "Permitir aplicaciones
descargadas desde:" (Allow apps downloaded from:) está establecida a
"Mac App Store," cambia a "Mac App Store y desarrolladores
identificados." (Mac App Store and identified developers)

Necesitas ir a la página web
@url{https://www.python.org/downloads/release/python-361/} y descargar
el instalador de Python:

@itemize @bullet
@item
Descarga el archivo Mac OS X 64-bit/32-bit installer,

@item
Doble click en python-3.6.1-macosx10.6.pkg para ejecutar el instalador.

@end itemize

@subsection Instalar Python: Linux

Es muy posible que ya tengas instalado Python de serie. Para verificar
que ya lo tienes instalado (y qu@'e versi@'on es), abre una consola y
escribe el siguiente comando:

@example
$ python3 --version
Python 3.6.1
@end example

Si tienes instalada una versi@'on diferente de Python, al menos 3.4.0
(por ejemplo 3.6.0), entonces no tienes que actualizar. Si tu no has
instalado Python, o si tu quieres una versi@'on diferente, primero
verifica que distribuci@'on de Linux est@'as usando con el siguiente
comando:

@example
$ grep ^NOMBRE= /etc/os-release
@end example

Despu@'es, dependiendo de el resultado, sigue una de las siguientes
gu@'{@dotless{i}}as de instalaci@'on bajo @'esta secci@'on.

@subsection Instalar Python: Debian o Ubuntu

Escribe este comando en tu consola:

@example
$ sudo apt install python3
@end example

@subsection Instalar Python: Fedora

Usa este comando en tu consola:

@example
$ sudo dnf install python3
@end example

Si estás en versiones antiguas de Fedora, puedes obtener un error que
el comando dnf no se encuentra. En ese caso, necesitas usar yum en su
lugar.

@subsection Instalar Python: openSUSE

Verifica si la instalación fue exitosa abriendo una terminal o
consola, y corriendo el comando python3:

@example
$ python3 --version
Python 3.6.1
@end example

La versión mostrada puede ser diferente desde 3.6.1 -- debería marcar
la versión que instalaste.

NOTA: Si está en Windows y recibe un mensaje de error que indica que
python3 no se encontró, intente usar python (sin el 3) y compruebe si
todavía podría ser una versión de Python que sea 3.4.0 o superior. Si
eso tampoco funciona, puede abrir un nuevo símbolo del sistema e
intentar nuevamente; Esto sucede si usa un símbolo del sistema abierto
antes de la instalación de Python.

Si tienes alguna duda, o si ocurrió algún error y no tienes idea sobre
qué hacer, ¡por favor pregunta a tu entrenador! Algunas veces las
cosas no van bien y es mejor pedir ayuda a alguien con más
experiencia.

@subsection Instala un Editor de Código

Hay muchos editores diferentes y la elección es principalmente una
cuestión de preferencia personal. La mayoría de programadores de
Python usan IDEs (Entornos de Desarrollo Integrados) complejos pero
muy potentes, como PyCharm. Sin embargo, como principiante,
probablemente no es lo más aconsejable; nuestras recomendaciones son
igualmente potentes pero mucho más simples.

Abajo presentamos nuestras sugerencias pero también puedes preguntarle
a tu mentora cuáles son las suyas -será más fácil que te ayude.

@subsection Visual Studio Code

Visual Studio Code es un recurso de edición de código desarrollado por
Microsoft para Windows, Linux y macOS. Esto incluye soporte para
depuración, control de Git incrustado, sintaxis destacada,
completación de código inteligente, fragmentos y refactorización de
código.

@subsection Gedit

Gedit es un editor gratuito de código abierto, disponible para todos
los sistemas operativos.

@subsection Sublime Text

Sublime Text es un editor muy popular con un periodo de prueba gratis,
y está disponible para todos los sistemas operativos.

@subsection Atom

Atom es otro editor popular. Es gratis, de código abierto y disponible
para Windows, OS X and Linux. Atom está desarrollado por Github.

@section ¿Por qué estamos instalando un editor de código?

Tú podrías estar preguntándote por qué estamos instalando este
especializado software editor de código en vez de usar algo como Word
o Notepad.

La primera razón es que el código necesita ser texto plano, y el
problema con programas como Word y Textedit es que no producen texto
plano, sino texto enriquecido (con fuentes y formatos), usando
formatos personalizados como RTF ( Formato del Texto Enriquecido, del
inglés Rich Text Format).

La segunda razón es que los editores de código están especializados
para esta función, así ellos pueden proveer ayuda a características
como destacar código con color acorde a su significado, o
automáticamente cerrando etiquetas para ti.

Veremos todo esto en acción más adelante. Pronto pensarás en convertir
el editor de código en una de tus herramientas favoritas. :)

@section Configura el entorno virtual (virtualenv) e instala Django

Parte de esta sección está basada en tutoriales por
@url{https://github.com/ggcarrots/django-carrots, Geek Girls Carrots}

Parte de este capítulo está basada en el django-marcador tutorial bajo
la licencia Creative Commons Attribution-ShareAlike 4.0
internacional. El tutorial de django-marcador tiene derechos de autor
de Markus Zapke-Gündemann et al.

@section Entorno virtual

Antes de instalar Django, instalaremos una herramienta extremadamente
útil que ayudará a mantener tu entorno de desarrollo ordenado en tu
computadora. Es posible saltarse este paso, pero es altamente
recomendable. ¡Empezar con la mejor configuración posible te ahorrará
muchos problemas en el futuro!

Así que, vamos a crear un entorno virtual (también llamado un
virtualenv). Virtualenv aísla tu configuración de Python/Django para
cada proyecto. Esto quiere decir que cualquier cambio que hagas en un
sitio web no afectará a ningún otro que estés desarrollando. Genial,
¿no?

Todo lo que necesitas hacer es encontrar un directorio en el que
quieras crear el virtualenv; tu directorio home, por ejemplo. En
Windows, puede verse como C:\Users\Name (donde Name es el nombre de tu
usuario).

@verbatim
NOTA: En Windows, asegúrate de que este directorio no contiene
caracteres especiales o acentuados; si tu nombre de usuario contiene
caracteres acentuados, usa un directorio distinto, por ejemplo
C:\djangogirls.
@end verbatim

Para este tutorial usaremos un nuevo directorio djangogirls en tu
directorio home:

@example
$ mkdir djangogirls
$ cd djangogirls
@end example

Haremos un virtualenv llamado myvenv. El comando general estará en el
formato:

@example
$ python3 -m venv myvenv
@end example

@subsection Virtual environment: Windows

Para crear un nuevo virtualenv, necesitas abrir una terminal "command
prompt" y ejecutar

@example
python -m venv myvenv
@end example

Se ver@'a as@'{@dotless{i}}:

@example
C:\Users\Name\djangogirls> python -m venv myvenv
@end example

Donde myvenv es el nombre de tu virtualenv. Puedes utilizar cualquier
otro nombre, pero asegúrate de usar minúsculas y no usar espacios,
acentos o caracteres especiales. También es una buena idea mantener el
nombre corto. ¡Vas utilizarlo muchas vecesl!

@subsection Virtual environment: Linux and OS X

Podemos crear un virtualenv en Linux y OS X, es tan sencillo como
ejecutar

@example
python3 -m venv myvenv
@end example

Se ver@'a as@'{@dotless{i}}:

myvenv es el nombre de tu virtualenv. Puedes usar cualquier otro
nombre, pero sólo utiliza minúsculas y no incluyas espacios. También
es una buena idea mantener el nombre corto. ¡Vas a referirte muchas
veces a él!

@verbatim
    NOTA: En algunas versiones de Debian/Ubuntu, puede que obtengas el
    siguiente error:

    The virtual environment was not created successfully because
       ensurepip is not available.

    En sistemas Debian/Ubuntu, tendrás que instalar el paquete
    python3-venv usando el siguiente comando.

    apt-get install python3-venv

    Puede que tengas que usar sudo con este comando.
    Después de instalar el paquete python3-venv, vuelve a crear tu
    entorno virtual.

    En este caso, sigue las instrucciones anteriores e instala el
    paquete python3-venv:

    $ sudo apt install python3-venv

    NOTA: En algunas versiones de Debian/Ubuntu inicializar el entorno
    virtual de esta manera da el siguiente error:

    Error: Command '['/home/eddie/Slask/tmp/venv/bin/python3', '-Im',
    'ensurepip', '--upgrade', '--default-pip']' returned non-zero exit
    status 1

    Para evitar esto, utiliza directamente el comando virtualenv.

    $ sudo apt-get install python-virtualenv
    $ virtualenv --python=python3.6 myvenv

    NOTA: Si obtienes un error como

    E: Unable to locate package python3-venv

    entonces ejecuta:

    sudo apt install python3.6-venv
@end verbatim

@section Trabajar con virtualenv

El comando anterior creará un directorio llamado myvenv (o cualquier
nombre que hayas elegido) que contiene nuestro entorno virtual
(básicamente un montón de archivos y carpetas).

@subsection Working with virtualenv: Windows

Inicia el entorno virtual ejecutando:

@verbatim
C:\Users\Name\djangogirls> myvenv\Scripts\activate

    Nota: en 10 de Windows puedes obtener un error en Windows
    PowerShell que dice execution of scripts is disabled on this
    system. En este caso, abre otro Windows PowerShell con la opción
    "Ejecutar como administrador". Luego intenta escribir el siguiente
    comando antes de inicializar tu entorno virtual:

    C:\WINDOWS\system32 > Set-ExecutionPolicy -ExecutionPolicy
       RemoteSigned Execution Policy Change The execution policy helps
       protect you from scripts that you do not trust. Changing the
       execution policy might expose you to the security risks
       described in the about_Execution_Policies help topic at
       http://go.microsoft.com/fwlink/?LinkID=135170.

    Do you want to change the execution policy?
    [Y] Yes [A] Yes to All [N] No [L]
    No to All [S] Suspend [?] Help (default is "N"): A

    NOTA: Para usuarios del popular editor VS Code, el cual viene con
    una terminal integrada basada en el poweshell de windows; si
    deseas añadir la terminal integrada, puedes arrancar el siguiente
    comando para activar tu entorno virtual:

    $ . myvenv\Scripts\activate.ps1

    La ventaja es que no tienes que cambiar las ventanas entre el
    editor de código y la línea de comandos.
@end verbatim

@subsection Working with virtualenv: Linux and OS X

Inicia el entorno virtual ejecutando:

@example
$ source myvenv/bin/activate
@end example

¡Recuerda reemplazar myvenv con tu nombre de virtualenv que hayas
elegido!

@verbatim
    NOTA: a veces source podría no estar disponible. En ese caso trata hacerlo de esta forma:

    command-line

    $ . myvenv/bin/activate
@end verbatim

Sabrás que tienes virtualenv iniciado cuando veas que la línea de
comando en tu consola tiene el prefijo (myvenv).

Cuando trabajes en un entorno virtual, python automáticamente se
referirá a la versión correcta, de modo que puedes utilizar python en
vez de python3.

Ok, tenemos todas las dependencias importantes en su
lugar. ¡Finalmente podemos instalar Django!

@section Instalar Django

Ahora que tienes tu virtualenv iniciado, puedes instalar Django.

Antes de hacer eso, debemos asegurarnos que tenemos la última versión
de pip, el software que utilizamos para instalar Django:

@example
(myvenv) ~$ python -m pip install --upgrade pip
@end example

@subsection Instalar paquetes con un fichero de requisitos (requirements)

Un fichero de requisitos (requirements) tiene una lista de
dependencias que se deben instalar mediante pip.

Primero crea un archivo requirements.txt dentro de tu directorio
djangogirls, usando el editor de código que instalaste previamente. Lo
puedes hacer mediante abriendo un nuevo archivo en el editor de código
y guardándolo como requirements.txt en el directorio djangogirls. Tu
directorio se verá así:

@verbatim
djangogirls
└───requirements.txt
@end verbatim

Dentro del fichero djangogirls/requirements.txt deberías tener el
siguiente texto:

@verbatim
Django~=2.2.4
@end verbatim

Ahora, ejecuta pip install -r requirements.txt para instalar Django.

@verbatim
(myvenv) ~$ pip install -r requirements.txt
Collecting Django~=2.2.4 (from -r requirements.txt (line 1))
  Downloading Django-2.2.4-py3-none-any.whl (7.1MB)
Installing collected packages: Django
Successfully installed Django-2.2.4
@end verbatim

@subsection{Installing Django: Windows}

@verbatim
Si obtienes un error cuando llamas al pip en la plataforma de Windows,
por favor verifica si el nombre de ruta de tu proyecto contiene
espacios, acentos o caracteres especiales (por ejemplo,
C:\Usuarios\NombreUsuario\djangogirls). Si los tiene, utiliza otro en
su lugar sin espacios, acentos o caracteres especiales (sugerencia:
C:\djangogirls). Crea un nuevo virtualenv en el nuevo directorio,
luego borra el viejo y trata de escribir el comando anterior otra
vez. (Moviendo el directorio virtualenv no funcionará debido a que usa
rutas absolutas.)
@end verbatim

@subsection{Installing Django: Windows 8 and Windows 10}

@verbatim
Tu línea de comando puede congelarse luego de intentar instalar Django. Si esto sucede, usa el siguiente comando:

    C:\Users\Name\djangogirls> python -m pip install -r requirements.txt
@end verbatim

@subsection{Installing Django: Linux}

Si obtienes un error cuando llamas pip en Ubuntu 12.04, por favor
corre python -m pip install -U --force-reinstall pip para reparar la
instalación de pip en el virtualenv.

¡Eso es todo! Ahora estás lista (por fin) para crear una aplicación Django!

@section{Instalar Git}

Git es un "sistema de control de versiones" que utilizan muchos
programadores. Este software puede seguir los cambios realizados en
archivos a lo largo del tiempo de forma que más tarde puedas volver a
cualquier versión anterior. Algo similar a la herramienta de "Control
de Cambios" en los programas de tipo Word (por ejemplo, Microsoft Word
o LibreOffice Writer), pero mucho más potente.

@subsection{Installing Git: Windows}

Puedes descargar Git desde @url{https://git-scm.com/}. Puedes hacer
click en "Next" en todos los pasos excepto en dos: cuando se te
pregunte que selecciones tu editor, selecciona Nano, y en el paso
"adjusting your PATH environment", selecciona "Use Git and optional
Unix tools from the Windows Command Prompt" (la última opción). Aparte
de eso, los valores por defecto son correctos. "Checkout
Windows-style, commit Unix-style line endings" tampoco necesita
corrección.

No olvides reiniciar el Símbolo del Sistema o el PowerShell una vez
que la instalación se complete con éxito.

@subsection{Installing Git: OS X}

Descarga Git de @url{https://git-scm.com} y sigue las instrucciones.

    Nota Si estas usando OS X 10.6, 10.7 o 10.8, tendrás que instalar
    git desde aquí:
    @url{https://sourceforge.net/projects/git-osx-installer/files/git-2.3.5-intel-universal-snow-leopard.dmg/download, Git installer for OS X Snow Leopard}

@subsection{Installing Git: Debian or Ubuntu}

@example
$ sudo apt install git
@end example

@subsection{Installing Git: Fedora}

@example
$ sudo dnf install git
@end example

@subsection{Installing Git: openSUSE}

@example
$sudo zypper install git
@end example

@section{Crear una cuenta de GitHub}

Ve a GitHub.com y regístrate con una nueva y gratuita cuenta de
usuario. Asegúrate de recordar tu contraseña (añádela a tu gestor de
contraseñas, si usas uno).

@section{Crear una cuenta de PythonAnywhere}

PythonAnywhere es un servicio para ejecutar código Python en
servidores "en la nube". Lo vamos a usar para alojar nuestro sitio
para que esté disponible en Internet.

Almacenaremos del blog que estamos construyendo sobre Python
Anywhere. Crea una cuenta como "Principiante/Beginner" en Python
Anywhere (el modo gratuito está bien, no necesitas una tarjeta de
crédito).

@image{images/pythonanywhere_beginner_account_button,6in,,Plans and Pricing}

@verbatim
Nota Cuando elijas un nombre de usuario, recuerda que la URL de tu
blog tendrá la forma tunombredeusuario.pythonanywhere.com, así que lo
mejor será usar tu apodo o elegir un nombre que indique de qué trata
tu blog. Asegúrate también de recordar tu contraseña (añádela a tu
gestor de contraseñas, si usas uno).
@end verbatim

@subsection{Crear un token para la API de PythonAnywhere}

Este paso solo necesita ser completado una vez. Una vez que te hayas
registrado en PythonAnywhere, serás llevado a tu tablón
principal. Encontrarás el enlace a la página de tu "Cuenta" en la
esquina superior derecha:

Enlace de cuenta en la parte superior derecha de la página

Después selecciona la lengueta llamada "API token", y haz click en el
botón que dice "Crear nueva API token"

@image{images/pythonanywhere_create_api_token,6in,,Your API Token}

@subsection{Comienza a leer}

Felicitaciones, ¡tú tienes todo configurado y listo para avanzar! si
aún tienes tiempo antes del taller, sería útil empezar a leer un poco
de los capítulos iniciales:

@itemize @bullet
@item
@url{https://tutorial.djangogirls.org/es/how_the_internet_works/, ¿C@'omo funciona Internet?}

@item
@url{https://tutorial.djangogirls.org/es/intro_to_command_line/,
Introducci@'on a la l@'{@dotless{i}}nea de comandos}

@item
@url{https://tutorial.djangogirls.org/es/python_introduction/, Introducci@'on a Python}

@item
@url{https://tutorial.djangogirls.org/es/django/, ¿Qu@'e es Django?}

@end itemize


@subsection{¡Disfruta el taller!}

Cuando comiences el taller, estarás habilitada para ir directamente a
¡Tu primer proyecto en Django! porque ya cubriste el material en los
capítulos anteriores.

@node C@'omo funciona Internet
@chapter C@'omo funciona Internet
@cindex C@'omo funciona Internet


@verbatim
    Para lectores en casa: este capítulo está cubierto en el video
    @url{https://www.youtube.com/watch?v=oM9yAA09wdc, ¿Cómo funciona Internet?}.

    Este capítulo está inspirado en la charla "How the Internet works"
    de Jessica McKellar (@url{http://web.mit.edu/jesstess/www/}).
@end verbatim

Apostamos a que utilizas Internet todos los días. Pero, ¿sabes lo que
pasa cuando escribes una dirección como @url{http://djangogirls.org}
en tu navegador y presionas enter?

La primera cosa que necesitas entender, es que una página web consiste
de un puñado de archivos guardados en el disco duro -- como tus
películas, música, o imágenes. Sin embargo, hay una parte que es única
para los sitios web: ellos incluyen código computarizado llamado HTML.

Si no estás familiarizada con la programación, puede ser difícil de
comprender HTML a la primera, pero tus navegadores web (como Chrome,
Safari, Firefox, etc.) lo aman. Los navegadores están diseñados para
entender este código, seguir sus instrucciones y presentar estos
archivos de los cuales está hecho tu sitio web, exactamente de la
forma que quieres.

Como cualquier otro archivo, tenemos que guardar los archivos HTML en
algún lugar de un disco duro. Para Internet, utilizamos equipos
especiales, de gran alcance llamados servidores. Estos no tienen una
pantalla, ratón o teclado, debido a que su propósito es almacenar
datos y servirlos. Por esa razón son llamados servidores -- porque
sirven los datos.

OK, pero quieres saber cómo Internet se ve, ¿cierto?

¡Te hemos hecho una imagen! Luce algo así:

@image{images/internet_1,6in,,C@'omo funciona Internet}

Parece un lío, ¿no? De hecho, es una red de máquinas interconectadas
(los servidores que nombramos anteriormente). ¡Cientos de miles de
máquinas! ¡Muchos, muchos kilómetros de cables alrededor del mundo!
Puedes visitar el sitio web Submarine Cable Map
(@url{http://submarinecablemap.com/}) y ver lo complicada que es la
red. Aquí hay una captura de pantalla de la página web:

@image{images/internet_3,6in,,Submarine Cable Map}

Es fascinante, ¿no? Pero sería imposible tener un cable entre todas y
cada una de las máquinas conectadas a internet. Así que, para llegar a
una máquina (por ejemplo la que aloja @url{http://djangogirls.org})
tenemos que elevar una solicitud mediante una gran cantidad de
máquinas diferentes.

Se parece a esto:

@image{images/internet_3,6in,,Django Girls Internet Map}

Imagina que cuando escribes @url{http://djangogirls.org}, estas
enviando una carta que dice: "Estimadas Django Girls, me gustaría ver
su sitio web djangogirls.org. ¡Por favor, envíenmelo!"

Tu carta va hacia la oficina de correo más cercana. Luego va a otra
que es un poco más cerca de su destinatario, luego otra y otra hasta
que es entregada a su destino. La única cosa diferente es que si
envías muchas cartas (paquetes de datos) al mismo lugar, cada una
podría ir a través de oficinas de correos totalmente distintas
(routers). Esto depende de cómo se distribuyen en cada oficina.

@image{images/internet_3,6in,,Django Girls Email}

Así es como funciona - se envían mensajes y se espera una
respuesta. En lugar de papel y lápiz, se usan bytes de datos, pero ¡la
idea es la misma!

En lugar de direcciones con el nombre de la calle, ciudad, código
postal y nombre del país, utilizamos direcciones IP. Tu computadora
pide primero el DNS (Domain Name System - en español Sistema de
Nombres de Dominio) para traducir djangogirls.org a una dirección
IP. Funciona en cierta manera como los viejos directorios telefónicos
donde puedes buscar el nombre de la persona que se deseas contactar y
encontrar su número de teléfono y dirección.

Cuando envías una carta, esta necesita tener ciertas características
para ser entregada correctamente: una dirección, sello, etc. También
utilizas un lenguaje que el receptor pueda entender, ¿cierto? Lo mismo
se aplica a los paquetes de datos que envía para ver un sitio
Web. Utilizamos un protocolo llamado HTTP (Protocolo de transferencia
de hipertexto).

Así que, básicamente, cuando tienes un sitio web necesitas tener un
servidor (la máquina) donde este vive. Cuando el servidor recibe una
petición entrante (en una carta), este envía su sitio de Internet (en
otra carta).

Ya que este es un tutorial de Django, puede que te preguntes qué es lo
que Django hace. Bueno, cuando envías una respuesta, no siempre
quieres enviar lo mismo a todo el mundo. Es mucho mejor si tus cartas
son personalizadas, especialmente para la persona que acaba de
escribir, ¿cierto? Django nos ayuda con la creación de estas cartas
personalizadas. :)

Suficiente conversación - ¡tiempo de crear!

@node Introducción a la interfaz de línea de comandos
@chapter Introducción a la interfaz de línea de comandos
@cindex Introducción a la interfaz de línea de comandos

Para los lectores en casa: este capítulo puede verse en el vídeo Tu
nuevo amigo: Línea de Comandos.

Es emocionante, ¿verdad? ¡Vas a escribir tu primera línea de código en
pocos minutos! :)

Permítenos presentarte a tu primer amigo nuevo: ¡la línea de comandos!

Los siguientes pasos te mostrarán cómo usar aquella ventana negra que
todos los hackers usan. Puede parecer un poco aterrador al principio
pero es solo un mensaje en pantalla que espera a que le des órdenes.

Nota Ten en cuenta que a lo largo de este libro usamos los términos
'directorio' y 'carpeta' indistintamente pero son la misma cosa.

@section ¿Qué es la línea de comandos?

La ventana, que generalmente es llamada línea de comandos ó interfaz
de línea de comandos, es una aplicación basada en texto para ver,
manejar y manipular archivos en tu ordenador. Similar a Windows
Explorer o Finder en Mac, pero sin la interfaz gráfica. Otros nombres
para la línea de comandos son: cmd, CLI, prompt -símbolo de sistema-,
console -consola- o terminal.

@section Abrir la interfaz de línea de comandos

Para empezar con algunos experimentos necesitarás abrir nuestra
interfaz de línea de comandos en primer lugar.

@subsection Opening: Windows

Dependiendo de tu versión de Windows y tu teclado, una de las opciones
siguientes debería abrir una ventana de comandos (puede que necesites
experimentar un poco, pero no se necesita probar todas estas
sugerencias):


Ve al menú o pantalla de Inicio, y escribe "Símbolo del Sistema" en el
cuadro de búsqueda.

@itemize @bullet
@item
Ve a Menú de inicio → Windows System → Command Prompt.
@item
Ve al menú de Inicio → Todos los Programas → Accessorios → Símbolo del
Sistema.
@item
Ve a la pantalla de Inicio, pasa el ratón sobre la esquina inferior
izquierda de la pantalla, y haz click en la flecha hacia abajo (en una
pantalla táctil, desliza hacia arriba desde la parte baja de la
pantalla). La página de la Aplicación debería abrirse. Haz click en
Símbolo del Sistema en la sección Sistema de Windows.
@item
Mantén la tecla especial de Windows de tu teclado y pulsa "X". Elige
"Símbolo del Sistema" del menú emergente.
@item
Mantén pulsada la tecla de Windows y pulsa "R" para abrir una ventana
"Ejecutar". Escribe "cmd" en la caja, y haz click en OK.
@end itemize

@image{images/windows-plus-r,6in,,Windows Commands}

Más adelante en este tutorial, necesitarás tener dos consolas de
comandos abiertas a la misma vez. Sin embargo, en algunas versiones de
Windows, si ya tienes abierta una ventana de comandos e intentas abrir
otra usando el mismo método, simplemente maximizará la que ya tienes
abierta. ¡Inténtalo ahora en tu ordenador y mira qué ocurre! Si solo
se abre una ventana de comandos, intenta alguno de los otros métodos
explicados anteriormente. Al menos uno de ellos debería abrir una
nueva ventana de comandos.

@subsection Opening: OS X

Ve a Aplicaciones → Utilidades → Terminal.

@subsection Opening: Linux

Probablemente se encuentre en Aplicaciones → Accesorios → Terminal, o
Aplicaciones → Sistema → Terminal, aunque esto dependerá de tu
sistema. Si no lo encuentras allí, intenta buscarlo en Google. :)

@section Símbolo del Sistema (Prompt)

Ahora deberías ver una pantalla blanca o negra que espera a que
introduzcas tus comandos.

@subsection Prompt: OS X and Linux

Si estás en Mac o Linux, probablemente veas una $, como ésta:

$

@subsection Prompt: Windows

En Windows, probablemente veas un >, como éste:

>

Echa un vistazo a la sección anterior sobre Linux -- podrás consultar
más cuando llegues a PythonAnywhere más adelante en este tutorial.

Cada comando vendrá precedido por un $ o un > y un espacio, pero no
debes escribirlos tú mismo. El ordenador lo hará por ti. :)

@verbatim
Solo una pequeña anotación: en tu caso puede que haya algo como
C:\Users\ola> o Olas-MacBook-Air:~ ola$ antes del símbolo de
introducción, lo cual es 100% NORMAL.
@end verbatim

La parte superior incluye el $ o el > que es llamado en la línea de
comandos, o mas corto prompt. Introduce algo allí.

En el tutorial, cuando queramos introducir un comando, incluye el $ o
>, y ocasionalmente más a la izquierda. Ignora la parte izquierda
solamente escribiendo el comando, el cuál inicia después del prompt.

@section Tu primer comando (¡BIEN!)

Comencemos tecleando este comando:

@subsection Your first command: OS X and Linux

$ whoami

@subsection Your first command: Windows

Y luego presiona enter. Esto será nuestro resultado:

$ whoami olasitarska

Como puedes ver, el computador solo ha impreso tu nombre de usuario. Ordenado, ¿ah? :)

    Intenta escribir cada comando; no copies y pegues. ¡De esta manera lo recordarás!

@section Fundamentos

Cada sistema operativo tiene un poco diferente la configuración de los
comandos para la consola, así que asegurate de seguir las
instrucciones para tu sistema operativo. Intentemos esto, ¿Verdad?

@section Directorio actual

Sería bueno saber dónde estamos ahora, ¿Correcto? Veamos. Escribe éste
comando y presiona

@subsection Current directory: OS X and Linux

@example
$ pwd
/Users/olasitarska
@end example

    Nota: 'pwd' es para imprimir el directorio de trabajo (print working directory).

@subsection Current directory: Windows

@example
> cd 
C:\Users\olasitarska
@end example

    Nota: 'cd' es para cambiar de directorio (change directory). Con la consola tu puedes usar pwd solo con Linux o Mac OS X.

Probablemente veremos algo similar en tu computador. Una vez que abres
la consola o la línea de comandos, usualmente inicias en tu directorio
principal.

@section Aprende más sobre un comando

¡Muchos comandos pueden escribirse en el prompt que tiene construido
una ayuda que puedes leer! Por ejemplo, aprende más acerca de el
comando del directorio actual:

@subsection Command help: OS X and Linux

OS X y Linux tienen un comando man, el cual te da una ayuda en
comandos. Intenta man pwd y ve qué dice, o coloca man antes de otro
comando para ver su ayuda. La salida de man nomalmentes es
paginada. Usa la barra de espacio para moverte a la siguiente página,
y q para salir de la ayuda.

@subsection Command Help: Windows

Añade un sufijo /? para más comandos que se imprimirán en la página de
ayuda. Puedes hacer scroll a la ventana de comandos para verlos
todos. Intenta cd /?.

@section Listar ficheros y directorios

Así que, ¿en qué estamos? Estaría bien saberlo. Veamos:

@subsection Listar ficheros y directorios: OS X y Linux

@example
$ ls
Applications
Desktop
Downloads
Music
...
@end example

@subsection Listar ficheros y directorios: Windows

@example
> dir
Directory of C:\Users\olasitarska
05/08/2014 07:28 PM <DIR> Applications
05/08/2014 07:28 PM <DIR> Desktop
05/08/2014 07:28 PM <DIR> Downloads
05/08/2014 07:28 PM <DIR> Music
...
@end example

Nota: En consola tu puedes usar también 'ls' como en Linux y Mac OS X. 

@section Cambiar el directorio actual

Ahora, vamos a nuestro directorio de escritorio:

@subsection Cambiar el directorio actual: OS X

@example
$ cd Desktop
@end example

@subsection Cambiar el directorio actual: Linux

@example
$ cd Escritorio
@end example

Nota que el nombre del directorio "Escritorio" puede ser traducido al
lenguaje de tu cuenta de Linux. Si ese es el caso, necesitarás
reemplazar Escritorio con la traducción del nombre; por ejemplo,
Desktop para el inglés.

@subsection Cambiar el directorio actual: Windows

@example
> cd Escritorio
@end example

Verifica si está cambiado actualmente:



@node Index
@unnumbered Index
@printindex cp

@bye
